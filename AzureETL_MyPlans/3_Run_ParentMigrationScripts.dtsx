<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="12/1/2021 1:54:36 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DESKTOP-1V5A3IQ"
  DTS:CreatorName="DESKTOP-1V5A3IQ\Admin"
  DTS:DTSID="{C18454E0-4C09-4E06-B96F-E7174D3DFC8B}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.170"
  DTS:LocaleID="16393"
  DTS:ObjectName="3_Run_ParentMigrationScripts"
  DTS:PackageType="5"
  DTS:VersionBuild="3"
  DTS:VersionGUID="{E89561D6-A394-44CA-B728-E55CDD613626}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\ACA_Type"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="ACA_Type"
      DTS:DTSID="{FC9F3D88-0424-4099-8907-C94DEA5E0765}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="ACA_Type"
      DTS:ThreadHint="84">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*ACA_Type*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[ACA_Type_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[ACA_Type]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [ACA_Type_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [ACA_Type_Text]&#xA;   FROM [dbo].[ACA_Type_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[ACA_Type] T &#xA;              WHERE T.ACA_Type_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT ACA_Type_ID FROM [dbo].[ACA_Type] T &#xA;              WHERE T.ACA_Type_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[ACA_Type] OUTPUT Inserted.ACA_Type_ID INTO @IdentityValue&#xA;&#x9;  SELECT ACA_Type_Text&#xA;   &#x9;&#x9;FROM [dbo].[ACA_Type_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.ACA_Type_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[ACA_Type_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[ACA_Type_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.ACA_Type ON; &#xA;INSERT INTO [dbo].[ACA_Type](ACA_Type_ID, ACA_Type_Text)&#xA;&#x9;SELECT ACA_Type_ID, ACA_Type_Text&#xA;   &#x9;FROM [dbo].[ACA_Type_MP] &#xA;SET IDENTITY_INSERT dbo.ACA_Type OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\AccruedBenefit_Type"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="AccruedBenefit_Type"
      DTS:DTSID="{0CE318D8-2393-4462-84E7-D430297453CF}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="AccruedBenefit_Type"
      DTS:ThreadHint="85">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*AccruedBenefit_Type*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[AccruedBenefit_Type_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[AccruedBenefit_Type]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [AccruedBenefit_Type_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [AccruedBenefit_Type_Text]&#xA;   FROM [dbo].[AccruedBenefit_Type_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[AccruedBenefit_Type] T &#xA;              WHERE T.AccruedBenefit_Type_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT AccruedBenefit_Type_ID FROM [dbo].[AccruedBenefit_Type] T &#xA;              WHERE T.AccruedBenefit_Type_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[AccruedBenefit_Type] OUTPUT Inserted.AccruedBenefit_Type_ID INTO @IdentityValue&#xA;&#x9;  SELECT AccruedBenefit_Type_Text&#xA;   &#x9;&#x9;FROM [dbo].[AccruedBenefit_Type_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.AccruedBenefit_Type_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[AccruedBenefit_Type_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[AccruedBenefit_Type_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.AccruedBenefit_Type ON; &#xA;INSERT INTO [dbo].[AccruedBenefit_Type](AccruedBenefit_Type_ID, AccruedBenefit_Type_Text)&#xA;&#x9;SELECT AccruedBenefit_Type_ID, AccruedBenefit_Type_Text&#xA;   &#x9;FROM [dbo].[AccruedBenefit_Type_MP] &#xA;SET IDENTITY_INSERT dbo.AccruedBenefit_Type OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\ActivityType"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="ActivityType"
      DTS:DTSID="{CB4F35DD-A7B4-40B3-B92D-CC178BFA01B3}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="ActivityType"
      DTS:ThreadHint="86">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*ActivityType*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[ActivityType_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[ActivityType]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [ActivityType_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [ActivityType_Text]&#xA;   FROM [dbo].[ActivityType_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[ActivityType] T &#xA;              WHERE T.ActivityType_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT ActivityType_ID FROM [dbo].[ActivityType] T &#xA;              WHERE T.ActivityType_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[ActivityType] OUTPUT Inserted.ActivityType_ID INTO @IdentityValue&#xA;&#x9;  SELECT ActivityType_Text&#xA;   &#x9;&#x9;FROM [dbo].[ActivityType_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.ActivityType_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[ActivityType_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[ActivityType_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.ActivityType ON; &#xA;INSERT INTO [dbo].[ActivityType](ActivityType_ID, ActivityType_Text)&#xA;&#x9;SELECT ActivityType_ID, ActivityType_Text&#xA;   &#x9;FROM [dbo].[ActivityType_MP] &#xA;SET IDENTITY_INSERT dbo.ActivityType OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\AgeRequirement_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="AgeRequirement_Lib"
      DTS:DTSID="{F8EED027-5487-445D-AA12-22CB8927B464}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="AgeRequirement_Lib"
      DTS:ThreadHint="87">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*AgeRequirement_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[AgeRequirement_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[AgeRequirement_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [AgeRequirement_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [AgeRequirement_Lib_Text]&#xA;   FROM [dbo].[AgeRequirement_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[AgeRequirement_Lib] T &#xA;              WHERE T.AgeRequirement_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT AgeRequirement_Lib_ID FROM [dbo].[AgeRequirement_Lib] T &#xA;              WHERE T.AgeRequirement_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[AgeRequirement_Lib] OUTPUT Inserted.AgeRequirement_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT AgeRequirement_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[AgeRequirement_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.AgeRequirement_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[AgeRequirement_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[AgeRequirement_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.AgeRequirement_Lib ON; &#xA;INSERT INTO [dbo].[AgeRequirement_Lib](AgeRequirement_Lib_ID, AgeRequirement_Lib_Text)&#xA;&#x9;SELECT AgeRequirement_Lib_ID, AgeRequirement_Lib_Text&#xA;   &#x9;FROM [dbo].[AgeRequirement_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.AgeRequirement_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\AmendingTypeLib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="AmendingTypeLib"
      DTS:DTSID="{617A0819-308C-4BAF-8213-F75783FDE40D}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="AmendingTypeLib"
      DTS:ThreadHint="88">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*AmendingTypeLib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[AmendingTypeLib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[AmendingTypeLib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [AmendingType_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [AmendingType_Text]&#xA;   FROM [dbo].[AmendingTypeLib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[AmendingTypeLib] T &#xA;              WHERE T.AmendingType_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT AmendingType_ID FROM [dbo].[AmendingTypeLib] T &#xA;              WHERE T.AmendingType_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[AmendingTypeLib] OUTPUT Inserted.AmendingType_ID INTO @IdentityValue&#xA;&#x9;  SELECT AmendingType_Text, IsPortalDeleted&#xA;   &#x9;&#x9;FROM [dbo].[AmendingTypeLib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.AmendingTypeLib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[AmendingTypeLib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[AmendingTypeLib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.AmendingTypeLib ON; &#xA;INSERT INTO [dbo].[AmendingTypeLib](AmendingType_ID, AmendingType_Text, IsPortalDeleted)&#xA;&#x9;SELECT AmendingType_ID, AmendingType_Text, IsPortalDeleted&#xA;   &#x9;FROM [dbo].[AmendingTypeLib_MP] &#xA;SET IDENTITY_INSERT dbo.AmendingTypeLib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\AnnualLoanMaintFee_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="AnnualLoanMaintFee_Lib"
      DTS:DTSID="{4BF4FBE9-5E5C-4262-AA62-AB3E5EE8D68A}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="AnnualLoanMaintFee_Lib"
      DTS:ThreadHint="89">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*AnnualLoanMaintFee_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[AnnualLoanMaintFee_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[AnnualLoanMaintFee_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [AnnualLoanMaintFee_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [AnnualLoanMaintFee_Lib_Text]&#xA;   FROM [dbo].[AnnualLoanMaintFee_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[AnnualLoanMaintFee_Lib] T &#xA;              WHERE T.AnnualLoanMaintFee_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT AnnualLoanMaintFee_Lib_ID FROM [dbo].[AnnualLoanMaintFee_Lib] T &#xA;              WHERE T.AnnualLoanMaintFee_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[AnnualLoanMaintFee_Lib] OUTPUT Inserted.AnnualLoanMaintFee_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT AnnualLoanMaintFee_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[AnnualLoanMaintFee_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.AnnualLoanMaintFee_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[AnnualLoanMaintFee_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[AnnualLoanMaintFee_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.AnnualLoanMaintFee_Lib ON; &#xA;INSERT INTO [dbo].[AnnualLoanMaintFee_Lib](AnnualLoanMaintFee_Lib_ID, AnnualLoanMaintFee_Lib_Text)&#xA;&#x9;SELECT AnnualLoanMaintFee_Lib_ID, AnnualLoanMaintFee_Lib_Text&#xA;   &#x9;FROM [dbo].[AnnualLoanMaintFee_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.AnnualLoanMaintFee_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\AutoRolloverProvider_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="AutoRolloverProvider_Lib"
      DTS:DTSID="{C1C955A6-BB4C-469F-953F-3C16B1430B73}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="AutoRolloverProvider_Lib"
      DTS:ThreadHint="28">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*AutoRolloverProvider_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[AutoRolloverProvider_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[AutoRolloverProvider_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [AutoRolloverProvider_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [AutoRolloverProvider_Lib_Text]&#xA;   FROM [dbo].[AutoRolloverProvider_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[AutoRolloverProvider_Lib] T &#xA;              WHERE T.AutoRolloverProvider_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT AutoRolloverProvider_Lib_ID FROM [dbo].[AutoRolloverProvider_Lib] T &#xA;              WHERE T.AutoRolloverProvider_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[AutoRolloverProvider_Lib] OUTPUT Inserted.AutoRolloverProvider_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT AutoRolloverProvider_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[AutoRolloverProvider_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.AutoRolloverProvider_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[AutoRolloverProvider_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[AutoRolloverProvider_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.AutoRolloverProvider_Lib ON; &#xA;INSERT INTO [dbo].[AutoRolloverProvider_Lib](AutoRolloverProvider_Lib_ID, AutoRolloverProvider_Lib_Text)&#xA;&#x9;SELECT AutoRolloverProvider_Lib_ID, AutoRolloverProvider_Lib_Text&#xA;   &#x9;FROM [dbo].[AutoRolloverProvider_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.AutoRolloverProvider_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\AvgMonthlyCompensationFrom_Type"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="AvgMonthlyCompensationFrom_Type"
      DTS:DTSID="{64639F94-FE49-4098-9359-E8CF94486156}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="AvgMonthlyCompensationFrom_Type"
      DTS:ThreadHint="29">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*AvgMonthlyCompensationFrom_Type*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[AvgMonthlyCompensationFrom_Type_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[AvgMonthlyCompensationFrom_Type]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [AvgMonthlyCompensationFrom_Type_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [AvgMonthlyCompensationFrom_Type_Text]&#xA;   FROM [dbo].[AvgMonthlyCompensationFrom_Type_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[AvgMonthlyCompensationFrom_Type] T &#xA;              WHERE T.AvgMonthlyCompensationFrom_Type_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT AvgMonthlyCompensationFrom_Type_ID FROM [dbo].[AvgMonthlyCompensationFrom_Type] T &#xA;              WHERE T.AvgMonthlyCompensationFrom_Type_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[AvgMonthlyCompensationFrom_Type] OUTPUT Inserted.AvgMonthlyCompensationFrom_Type_ID INTO @IdentityValue&#xA;&#x9;  SELECT AvgMonthlyCompensationFrom_Type_Text&#xA;   &#x9;&#x9;FROM [dbo].[AvgMonthlyCompensationFrom_Type_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.AvgMonthlyCompensationFrom_Type_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[AvgMonthlyCompensationFrom_Type_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[AvgMonthlyCompensationFrom_Type_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.AvgMonthlyCompensationFrom_Type ON; &#xA;INSERT INTO [dbo].[AvgMonthlyCompensationFrom_Type](AvgMonthlyCompensationFrom_Type_ID, AvgMonthlyCompensationFrom_Type_Text)&#xA;&#x9;SELECT AvgMonthlyCompensationFrom_Type_ID, AvgMonthlyCompensationFrom_Type_Text&#xA;   &#x9;FROM [dbo].[AvgMonthlyCompensationFrom_Type_MP] &#xA;SET IDENTITY_INSERT dbo.AvgMonthlyCompensationFrom_Type OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;    &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Billing_Type"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Billing_Type"
      DTS:DTSID="{2CFCC7ED-01D9-4E3B-95F7-62B5D20B6E74}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Billing_Type"
      DTS:ThreadHint="30">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*Billing_Type*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[Billing_Type_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[Billing_Type]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [Billing_Type_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [Billing_Type_Text]&#xA;   FROM [dbo].[Billing_Type_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[Billing_Type] T &#xA;              WHERE T.Billing_Type_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT Billing_Type_ID FROM [dbo].[Billing_Type] T &#xA;              WHERE T.Billing_Type_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[Billing_Type] OUTPUT Inserted.Billing_Type_ID INTO @IdentityValue&#xA;&#x9;  SELECT Billing_Type_Text&#xA;   &#x9;&#x9;FROM [dbo].[Billing_Type_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.Billing_Type_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[Billing_Type_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[Billing_Type_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.Billing_Type ON; &#xA;INSERT INTO [dbo].[Billing_Type](Billing_Type_ID, Billing_Type_Text)&#xA;&#x9;SELECT Billing_Type_ID, Billing_Type_Text&#xA;   &#x9;FROM [dbo].[Billing_Type_MP] &#xA;SET IDENTITY_INSERT dbo.Billing_Type OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\BondingCo_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="BondingCo_Lib"
      DTS:DTSID="{27847355-E902-4243-9648-C939D51AF4EF}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="BondingCo_Lib"
      DTS:ThreadHint="31">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="&#xA;/*BondingCo_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(MAX), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[BondingCo_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[BondingCo_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = BondingCo_ID,&#xA;&#x9;&#x9;&#x9;@LibName = BondingCo_Text&#xA;   FROM [dbo].[BondingCo_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[BondingCo_Lib] T &#xA;              WHERE TRIM(T.BondingCo_Text) = TRIM(@LibName)) &#xA;BEGIN&#xA;    SET @NewID = (SELECT TOP 1 BondingCo_ID FROM [dbo].[BondingCo_Lib] T &#xA;              WHERE TRIM(T.BondingCo_Text) = TRIM(@LibName))&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;IF(@OldID = -1)&#xA;&#x9;BEGIN&#xA;&#x9;SET IDENTITY_INSERT dbo.[BondingCo_Lib] ON; &#xA;&#x9;INSERT INTO [dbo].[BondingCo_Lib](BondingCo_ID, BondingCo_Text, LastTouched, ByWho) OUTPUT Inserted.BondingCo_ID INTO @IdentityValue&#xA;&#x9;&#x9;SELECT BondingCo_ID, BondingCo_Text, LastTouched, ByWho&#xA;   &#x9;&#x9;FROM [dbo].[BondingCo_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET IDENTITY_INSERT dbo.[BondingCo_Lib] OFF;&#xA;&#x9;END&#xA;&#x9;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[BondingCo_Lib] OUTPUT Inserted.BondingCo_ID INTO @IdentityValue&#xA;&#x9;  SELECT BondingCo_Text, LastTouched, ByWho&#xA;   &#x9;&#x9;FROM [dbo].[BondingCo_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;END&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA;&#x9;IF OBJECT_ID('dbo.BondingCo_Lib_ID_Mapping') IS NOT NULL&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[BondingCo_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)&#xA;&#x9;END&#xA; &#xA;   SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[BondingCo_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.[BondingCo_Lib] ON; &#xA;INSERT INTO [dbo].[BondingCo_Lib](BondingCo_ID, BondingCo_Text, LastTouched, ByWho)&#xA;&#x9;SELECT BondingCo_ID, BondingCo_Text, LastTouched, ByWho&#xA;   &#x9;FROM [dbo].[BondingCo_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.[BondingCo_Lib] OFF;&#xA;END&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());    &#xA;END CATCH;  &#xA;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Builder_Group"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Builder_Group"
      DTS:DTSID="{35B55182-D87E-453F-8935-D419B504CEB3}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Builder_Group"
      DTS:ThreadHint="32">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*Builder_Group*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[Builder_Group_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[Builder_Group]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [Builder_Group_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [Builder_Group_Text]&#xA;   FROM [dbo].[Builder_Group_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[Builder_Group] T &#xA;              WHERE T.Builder_Group_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT Builder_Group_ID FROM [dbo].[Builder_Group] T &#xA;              WHERE T.Builder_Group_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[Builder_Group] OUTPUT Inserted.Builder_Group_ID INTO @IdentityValue&#xA;&#x9;  SELECT Builder_Group_Text, LastTouched, ByWho&#xA;   &#x9;&#x9;FROM [dbo].[Builder_Group_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.Builder_Group_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[Builder_Group_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[Builder_Group_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.Builder_Group ON; &#xA;INSERT INTO [dbo].[Builder_Group](Builder_Group_ID, Builder_Group_Text, LastTouched, ByWho)&#xA;&#x9;SELECT Builder_Group_ID, Builder_Group_Text, LastTouched, ByWho&#xA;   &#x9;FROM [dbo].[Builder_Group_MP] &#xA;SET IDENTITY_INSERT dbo.Builder_Group OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\ClientToDoSectionLib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="ClientToDoSectionLib"
      DTS:DTSID="{71C005E5-E914-4308-924A-7CD0F343C996}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="ClientToDoSectionLib"
      DTS:ThreadHint="33">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*ClientToDoSectionLib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[ClientToDoSectionLib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[ClientToDoSectionLib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [ClientToDoSectionLib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [ClientToDoSectionLib_Text]&#xA;   FROM [dbo].[ClientToDoSectionLib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[ClientToDoSectionLib] T &#xA;              WHERE T.ClientToDoSectionLib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT ClientToDoSectionLib_ID FROM [dbo].[ClientToDoSectionLib] T &#xA;              WHERE T.ClientToDoSectionLib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[ClientToDoSectionLib] OUTPUT Inserted.ClientToDoSectionLib_ID INTO @IdentityValue&#xA;&#x9;  SELECT ClientToDoSectionLib_Text, ClientToDoSectionLib_TableName&#xA;   &#x9;&#x9;FROM [dbo].[ClientToDoSectionLib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.ClientToDoSectionLib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[ClientToDoSectionLib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[ClientToDoSectionLib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.ClientToDoSectionLib ON; &#xA;INSERT INTO [dbo].[ClientToDoSectionLib](ClientToDoSectionLib_ID, ClientToDoSectionLib_Text, ClientToDoSectionLib_TableName)&#xA;&#x9;SELECT ClientToDoSectionLib_ID, ClientToDoSectionLib_Text, ClientToDoSectionLib_TableName&#xA;   &#x9;FROM [dbo].[ClientToDoSectionLib_MP] &#xA;SET IDENTITY_INSERT dbo.ClientToDoSectionLib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\ComputationMethod_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="ComputationMethod_Lib"
      DTS:DTSID="{BA23AD3B-F928-4396-A89E-898C07296FFB}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="ComputationMethod_Lib"
      DTS:ThreadHint="34">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*ComputationMethod_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[ComputationMethod_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[ComputationMethod_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [ComputationMethod_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [ComputationMethod_Lib_Text]&#xA;   FROM [dbo].[ComputationMethod_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[ComputationMethod_Lib] T &#xA;              WHERE T.ComputationMethod_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT ComputationMethod_Lib_ID FROM [dbo].[ComputationMethod_Lib] T &#xA;              WHERE T.ComputationMethod_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[ComputationMethod_Lib] OUTPUT Inserted.ComputationMethod_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT ComputationMethod_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[ComputationMethod_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.ComputationMethod_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[ComputationMethod_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[ComputationMethod_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.ComputationMethod_Lib ON; &#xA;INSERT INTO [dbo].[ComputationMethod_Lib](ComputationMethod_Lib_ID, ComputationMethod_Lib_Text)&#xA;&#x9;SELECT ComputationMethod_Lib_ID, ComputationMethod_Lib_Text&#xA;   &#x9;FROM [dbo].[ComputationMethod_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.ComputationMethod_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\ComputationPeriod_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="ComputationPeriod_Lib"
      DTS:DTSID="{818F49E2-DFFE-4861-9274-028848D7B6CF}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="ComputationPeriod_Lib"
      DTS:ThreadHint="35">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*ComputationPeriod_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[ComputationPeriod_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[ComputationPeriod_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [ComputationPeriod_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [ComputationPeriod_Lib_Text]&#xA;   FROM [dbo].[ComputationPeriod_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[ComputationPeriod_Lib] T &#xA;              WHERE T.ComputationPeriod_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT ComputationPeriod_Lib_ID FROM [dbo].[ComputationPeriod_Lib] T &#xA;              WHERE T.ComputationPeriod_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[ComputationPeriod_Lib] OUTPUT Inserted.ComputationPeriod_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT ComputationPeriod_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[ComputationPeriod_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.ComputationPeriod_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[ComputationPeriod_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[ComputationPeriod_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.ComputationPeriod_Lib ON; &#xA;INSERT INTO [dbo].[ComputationPeriod_Lib](ComputationPeriod_Lib_ID, ComputationPeriod_Lib_Text)&#xA;&#x9;SELECT ComputationPeriod_Lib_ID, ComputationPeriod_Lib_Text&#xA;   &#x9;FROM [dbo].[ComputationPeriod_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.ComputationPeriod_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\ConsideredCompensationType"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="ConsideredCompensationType"
      DTS:DTSID="{C1FA1203-F0A8-471A-8CE5-35ECDDCF34D6}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="ConsideredCompensationType"
      DTS:ThreadHint="36">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*ConsideredCompensationType*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[ConsideredCompensationType_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[ConsideredCompensationType]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [ConsideredCompensationType_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [ConsideredCompensationType_Text]&#xA;   FROM [dbo].[ConsideredCompensationType_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[ConsideredCompensationType] T &#xA;              WHERE T.ConsideredCompensationType_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT ConsideredCompensationType_ID FROM [dbo].[ConsideredCompensationType] T &#xA;              WHERE T.ConsideredCompensationType_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[ConsideredCompensationType] OUTPUT Inserted.ConsideredCompensationType_ID INTO @IdentityValue&#xA;&#x9;  SELECT ConsideredCompensationType_Text&#xA;   &#x9;&#x9;FROM [dbo].[ConsideredCompensationType_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.ConsideredCompensationType_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[ConsideredCompensationType_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[ConsideredCompensationType_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.ConsideredCompensationType ON; &#xA;INSERT INTO [dbo].[ConsideredCompensationType](ConsideredCompensationType_ID, ConsideredCompensationType_Text)&#xA;&#x9;SELECT ConsideredCompensationType_ID, ConsideredCompensationType_Text&#xA;   &#x9;FROM [dbo].[ConsideredCompensationType_MP] &#xA;SET IDENTITY_INSERT dbo.ConsideredCompensationType OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\DefinedCompensationType"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="DefinedCompensationType"
      DTS:DTSID="{DA0577A5-8C63-445D-905D-429ADF44B19F}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="DefinedCompensationType"
      DTS:ThreadHint="37">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*DefinedCompensationType*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[DefinedCompensationType_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[DefinedCompensationType]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [DefinedCompensationType_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [DefinedCompensationType_Text]&#xA;   FROM [dbo].[DefinedCompensationType_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[DefinedCompensationType] T &#xA;              WHERE T.DefinedCompensationType_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT DefinedCompensationType_ID FROM [dbo].[DefinedCompensationType] T &#xA;              WHERE T.DefinedCompensationType_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[DefinedCompensationType] OUTPUT Inserted.DefinedCompensationType_ID INTO @IdentityValue&#xA;&#x9;  SELECT DefinedCompensationType_Text&#xA;   &#x9;&#x9;FROM [dbo].[DefinedCompensationType_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.DefinedCompensationType_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[DefinedCompensationType_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[DefinedCompensationType_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.DefinedCompensationType ON; &#xA;INSERT INTO [dbo].[DefinedCompensationType](DefinedCompensationType_ID, DefinedCompensationType_Text)&#xA;&#x9;SELECT DefinedCompensationType_ID, DefinedCompensationType_Text&#xA;   &#x9;FROM [dbo].[DefinedCompensationType_MP] &#xA;SET IDENTITY_INSERT dbo.DefinedCompensationType OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\DeliverTo_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="DeliverTo_Lib"
      DTS:DTSID="{596459CF-7ECF-45E4-8537-CBBF3ECA1852}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="DeliverTo_Lib"
      DTS:ThreadHint="38">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*DeliverTo_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[DeliverTo_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[DeliverTo_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [DeliverTo_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [DeliverTo_Lib_Text]&#xA;   FROM [dbo].[DeliverTo_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[DeliverTo_Lib] T &#xA;              WHERE T.DeliverTo_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT DeliverTo_Lib_ID FROM [dbo].[DeliverTo_Lib] T &#xA;              WHERE T.DeliverTo_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[DeliverTo_Lib] OUTPUT Inserted.DeliverTo_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT DeliverTo_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[DeliverTo_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.DeliverTo_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[DeliverTo_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[DeliverTo_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.DeliverTo_Lib ON; &#xA;INSERT INTO [dbo].[DeliverTo_Lib](DeliverTo_Lib_ID, DeliverTo_Lib_Text)&#xA;&#x9;SELECT DeliverTo_Lib_ID, DeliverTo_Lib_Text&#xA;   &#x9;FROM [dbo].[DeliverTo_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.DeliverTo_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\DeliveryModeLib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="DeliveryModeLib"
      DTS:DTSID="{D844058B-5EC0-4C43-AB61-47F64414D25C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="DeliveryModeLib"
      DTS:ThreadHint="39">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*DeliveryModeLib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[DeliveryModeLib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[DeliveryModeLib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [DeliveryMode_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [DeliveryMode_Text]&#xA;   FROM [dbo].[DeliveryModeLib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[DeliveryModeLib] T &#xA;              WHERE T.DeliveryMode_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT DeliveryMode_ID FROM [dbo].[DeliveryModeLib] T &#xA;              WHERE T.DeliveryMode_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[DeliveryModeLib] OUTPUT Inserted.DeliveryMode_ID INTO @IdentityValue&#xA;&#x9;  SELECT DeliveryMode_Text&#xA;   &#x9;&#x9;FROM [dbo].[DeliveryModeLib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.DeliveryMode_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[DeliveryMode_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[DeliveryModeLib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.DeliveryModeLib ON; &#xA;INSERT INTO [dbo].[DeliveryModeLib](DeliveryMode_ID, DeliveryMode_Text)&#xA;&#x9;SELECT DeliveryMode_ID, DeliveryMode_Text&#xA;   &#x9;FROM [dbo].[DeliveryModeLib_MP] &#xA;SET IDENTITY_INSERT dbo.DeliveryModeLib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\DistDeliveryMethod_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="DistDeliveryMethod_Lib"
      DTS:DTSID="{64EE2657-816B-443C-94DB-CDB6DA8224AC}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="DistDeliveryMethod_Lib"
      DTS:ThreadHint="40">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*DistDeliveryMethod_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[DistDeliveryMethod_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[DistDeliveryMethod_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [DistDeliveryMethod_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [DistDeliveryMethod_Lib_Text]&#xA;   FROM [dbo].[DistDeliveryMethod_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[DistDeliveryMethod_Lib] T &#xA;              WHERE T.DistDeliveryMethod_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT DistDeliveryMethod_Lib_ID FROM [dbo].[DistDeliveryMethod_Lib] T &#xA;              WHERE T.DistDeliveryMethod_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistDeliveryMethod_Lib] OUTPUT Inserted.DistDeliveryMethod_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT DistDeliveryMethod_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[DistDeliveryMethod_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.DistDeliveryMethod_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistDeliveryMethod_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[DistDeliveryMethod_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.DistDeliveryMethod_Lib ON; &#xA;INSERT INTO [dbo].[DistDeliveryMethod_Lib](DistDeliveryMethod_Lib_ID, DistDeliveryMethod_Lib_Text)&#xA;&#x9;SELECT DistDeliveryMethod_Lib_ID, DistDeliveryMethod_Lib_Text&#xA;   &#x9;FROM [dbo].[DistDeliveryMethod_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.DistDeliveryMethod_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\DistFeeAmounts_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="DistFeeAmounts_Lib"
      DTS:DTSID="{11AC2B12-6BC0-4553-B545-FCFF63C1AC89}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="DistFeeAmounts_Lib"
      DTS:ThreadHint="41">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*DistFeeAmounts_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[DistFeeAmounts_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[DistFeeAmounts_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [DistFeeAmounts_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [DistFeeAmounts_Lib_Text]&#xA;   FROM [dbo].[DistFeeAmounts_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[DistFeeAmounts_Lib] T &#xA;              WHERE T.DistFeeAmounts_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT DistFeeAmounts_Lib_ID FROM [dbo].[DistFeeAmounts_Lib] T &#xA;              WHERE T.DistFeeAmounts_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistFeeAmounts_Lib] OUTPUT Inserted.DistFeeAmounts_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT DistFeeAmounts_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[DistFeeAmounts_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.DistFeeAmounts_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistFeeAmounts_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[DistFeeAmounts_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.DistFeeAmounts_Lib ON; &#xA;INSERT INTO [dbo].[DistFeeAmounts_Lib](DistFeeAmounts_Lib_ID, DistFeeAmounts_Lib_Text)&#xA;&#x9;SELECT DistFeeAmounts_Lib_ID, DistFeeAmounts_Lib_Text&#xA;   &#x9;FROM [dbo].[DistFeeAmounts_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.DistFeeAmounts_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\DistribServiceOptionsType"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="DistribServiceOptionsType"
      DTS:DTSID="{5BD43FC4-AC34-4A55-A21E-F4471B9ECB12}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="DistribServiceOptionsType"
      DTS:ThreadHint="42">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*DistribServiceOptionsType*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[DistribServiceOptionsType_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[DistribServiceOptionsType]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [DistribServiceOptionsType_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [DistribServiceOptionsType_Text]&#xA;   FROM [dbo].[DistribServiceOptionsType_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[DistribServiceOptionsType] T &#xA;              WHERE T.DistribServiceOptionsType_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT DistribServiceOptionsType_ID FROM [dbo].[DistribServiceOptionsType] T &#xA;              WHERE T.DistribServiceOptionsType_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistribServiceOptionsType] OUTPUT Inserted.DistribServiceOptionsType_ID INTO @IdentityValue&#xA;&#x9;  SELECT DistribServiceOptionsType_Text&#xA;   &#x9;&#x9;FROM [dbo].[DistribServiceOptionsType_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.DistribServiceOptionsType_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistribServiceOptionsType_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[DistribServiceOptionsType_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.DistribServiceOptionsType ON; &#xA;INSERT INTO [dbo].[DistribServiceOptionsType](DistribServiceOptionsType_ID, DistribServiceOptionsType_Text)&#xA;&#x9;SELECT DistribServiceOptionsType_ID, DistribServiceOptionsType_Text&#xA;   &#x9;FROM [dbo].[DistribServiceOptionsType_MP] &#xA;SET IDENTITY_INSERT dbo.DistribServiceOptionsType OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\DistributionCharge"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="DistributionCharge"
      DTS:DTSID="{50B2EF0E-0773-4FAE-963E-E96A2694458B}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="DistributionCharge"
      DTS:ThreadHint="43">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*DistributionCharge*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName MONEY, @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[DistributionCharge_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[DistributionCharge]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [ID],&#xA;&#x9;&#x9;&#x9;@LibName = [DistributionChargeAmount]&#xA;   FROM [dbo].[DistributionCharge_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[DistributionCharge] T &#xA;              WHERE T.[DistributionChargeAmount] = @LibName) &#xA;BEGIN&#xA;&#x9;PRINT 'Data exists already'&#xA;    SET @NewID = (SELECT TOP 1 ID FROM [dbo].[DistributionCharge] T &#xA;              WHERE T.[DistributionChargeAmount] = @LibName)&#xA;&#x9;PRINT @NewID&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;IF(@OldID = -1)&#xA;&#x9;BEGIN&#xA;&#x9;SET IDENTITY_INSERT dbo.DistributionCharge ON; &#xA;&#x9;INSERT INTO [dbo].[DistributionCharge](ID, [DistributionChargeAmount]) OUTPUT Inserted.ID INTO @IdentityValue&#xA;&#x9;&#x9;SELECT ID, [DistributionChargeAmount]&#xA;   &#x9;&#x9;FROM [dbo].[DistributionCharge_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET IDENTITY_INSERT dbo.DistributionCharge OFF;&#xA;&#x9;END&#xA;&#x9;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistributionCharge] OUTPUT Inserted.ID INTO @IdentityValue&#xA;&#x9;  SELECT [DistributionChargeAmount]&#xA;   &#x9;&#x9;FROM [dbo].[DistributionCharge_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;END&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;&#x9;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.DistributionCharge_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistributionCharge_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[DistributionCharge_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.DistributionCharge ON; &#xA;INSERT INTO [dbo].[DistributionCharge](ID, [DistributionChargeAmount])&#xA;&#x9;SELECT ID, [DistributionChargeAmount]&#xA;   &#x9;FROM [dbo].[DistributionCharge_MP] &#xA;SET IDENTITY_INSERT dbo.DistributionCharge OFF;&#xA;END  &#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\DistributionPayableToWhom_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="DistributionPayableToWhom_Lib"
      DTS:DTSID="{60C7128E-985E-44D1-920F-AF83C9B95740}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="DistributionPayableToWhom_Lib"
      DTS:ThreadHint="44">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*DistributionPayableToWhom_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[DistributionPayableToWhom_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[DistributionPayableToWhom_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [DistributionPayableToWhom_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [DistributionPayableToWhom_Lib_Text]&#xA;   FROM [dbo].[DistributionPayableToWhom_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[DistributionPayableToWhom_Lib] T &#xA;              WHERE T.DistributionPayableToWhom_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT DistributionPayableToWhom_Lib_ID FROM [dbo].[DistributionPayableToWhom_Lib] T &#xA;              WHERE T.DistributionPayableToWhom_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistributionPayableToWhom_Lib] OUTPUT Inserted.DistributionPayableToWhom_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT DistributionPayableToWhom_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[DistributionPayableToWhom_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.DistributionPayableToWhom_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistributionPayableToWhom_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[DistributionPayableToWhom_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.DistributionPayableToWhom_Lib ON; &#xA;INSERT INTO [dbo].[DistributionPayableToWhom_Lib](DistributionPayableToWhom_Lib_ID, DistributionPayableToWhom_Lib_Text)&#xA;&#x9;SELECT DistributionPayableToWhom_Lib_ID, DistributionPayableToWhom_Lib_Text&#xA;   &#x9;FROM [dbo].[DistributionPayableToWhom_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.DistributionPayableToWhom_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\DistributionTiming_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="DistributionTiming_Lib"
      DTS:DTSID="{12C1E9F9-CF89-4C8D-85FA-9A2B88634E20}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="DistributionTiming_Lib"
      DTS:ThreadHint="25">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*DistributionTiming_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[DistributionTiming_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[DistributionTiming_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [DistributionTiming_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [DistributionTiming_Lib_Text]&#xA;   FROM [dbo].[DistributionTiming_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[DistributionTiming_Lib] T &#xA;              WHERE T.DistributionTiming_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT DistributionTiming_Lib_ID FROM [dbo].[DistributionTiming_Lib] T &#xA;              WHERE T.DistributionTiming_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistributionTiming_Lib] OUTPUT Inserted.DistributionTiming_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT DistributionTiming_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[DistributionTiming_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.DistributionTiming_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistributionTiming_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[DistributionTiming_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.DistributionTiming_Lib ON; &#xA;INSERT INTO [dbo].[DistributionTiming_Lib](DistributionTiming_Lib_ID, DistributionTiming_Lib_Text)&#xA;&#x9;SELECT DistributionTiming_Lib_ID, DistributionTiming_Lib_Text&#xA;   &#x9;FROM [dbo].[DistributionTiming_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.DistributionTiming_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\DistributionType_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="DistributionType_Lib"
      DTS:DTSID="{256E4B80-496A-441E-B44E-282881651DAA}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="DistributionType_Lib"
      DTS:ThreadHint="26">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*DistributionType_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[DistributionType_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[DistributionType_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [DistributionType_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [DistributionType_Lib_Text]&#xA;   FROM [dbo].[DistributionType_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[DistributionType_Lib] T &#xA;              WHERE T.DistributionType_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT DistributionType_Lib_ID FROM [dbo].[DistributionType_Lib] T &#xA;              WHERE T.DistributionType_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistributionType_Lib] OUTPUT Inserted.DistributionType_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT DistributionType_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[DistributionType_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.DistributionType_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistributionType_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[DistributionType_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.DistributionType_Lib ON; &#xA;INSERT INTO [dbo].[DistributionType_Lib](DistributionType_Lib_ID, DistributionType_Lib_Text)&#xA;&#x9;SELECT DistributionType_Lib_ID, DistributionType_Lib_Text&#xA;   &#x9;FROM [dbo].[DistributionType_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.DistributionType_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\DistSourcesAllowed_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="DistSourcesAllowed_Lib"
      DTS:DTSID="{AD1B28A0-6F80-4F1E-A04B-DD1DC1A1B69A}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="DistSourcesAllowed_Lib"
      DTS:ThreadHint="24">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*DistSourcesAllowed_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[DistSourcesAllowed_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[DistSourcesAllowed_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [DistSourcesAllowed_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [DistSourcesAllowed_Lib_Text]&#xA;   FROM [dbo].[DistSourcesAllowed_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[DistSourcesAllowed_Lib] T &#xA;              WHERE T.DistSourcesAllowed_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT DistSourcesAllowed_Lib_ID FROM [dbo].[DistSourcesAllowed_Lib] T &#xA;              WHERE T.DistSourcesAllowed_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistSourcesAllowed_Lib] OUTPUT Inserted.DistSourcesAllowed_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT DistSourcesAllowed_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[DistSourcesAllowed_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.DistSourcesAllowed_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistSourcesAllowed_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[DistSourcesAllowed_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.DistSourcesAllowed_Lib ON; &#xA;INSERT INTO [dbo].[DistSourcesAllowed_Lib](DistSourcesAllowed_Lib_ID, DistSourcesAllowed_Lib_Text)&#xA;&#x9;SELECT DistSourcesAllowed_Lib_ID, DistSourcesAllowed_Lib_Text&#xA;   &#x9;FROM [dbo].[DistSourcesAllowed_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.DistSourcesAllowed_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\DistTaxCode1099_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="DistTaxCode1099_Lib"
      DTS:DTSID="{EF16478E-21E0-4F07-87E2-EFEE6BEAB10C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="DistTaxCode1099_Lib"
      DTS:ThreadHint="22">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*DistTaxCode1099_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[DistTaxCode1099_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[DistTaxCode1099_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [DistTaxCode1099_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [DistTaxCode1099_Lib_Text]&#xA;   FROM [dbo].[DistTaxCode1099_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[DistTaxCode1099_Lib] T &#xA;              WHERE T.DistTaxCode1099_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT DistTaxCode1099_Lib_ID FROM [dbo].[DistTaxCode1099_Lib] T &#xA;              WHERE T.DistTaxCode1099_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistTaxCode1099_Lib] OUTPUT Inserted.DistTaxCode1099_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT DistTaxCode1099_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[DistTaxCode1099_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.DistTaxCode1099_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[DistTaxCode1099_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[DistTaxCode1099_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.DistTaxCode1099_Lib ON; &#xA;INSERT INTO [dbo].[DistTaxCode1099_Lib](DistTaxCode1099_Lib_ID, DistTaxCode1099_Lib_Text)&#xA;&#x9;SELECT DistTaxCode1099_Lib_ID, DistTaxCode1099_Lib_Text&#xA;   &#x9;FROM [dbo].[DistTaxCode1099_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.DistTaxCode1099_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\DocumentWorkLib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="DocumentWorkLib"
      DTS:DTSID="{F4A319F9-C0C1-460E-82FD-F7B964B7D525}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="DocumentWorkLib"
      DTS:ThreadHint="23">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*DocumentWorkLib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[DocumentWorkLib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[DocumentWorkLib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [DocumentWork_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [DocumentWork_Text]&#xA;   FROM [dbo].[DocumentWorkLib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[DocumentWorkLib] T &#xA;              WHERE T.DocumentWork_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT DocumentWork_ID FROM [dbo].[DocumentWorkLib] T &#xA;              WHERE T.DocumentWork_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[DocumentWorkLib] OUTPUT Inserted.DocumentWork_ID INTO @IdentityValue&#xA;&#x9;  SELECT DocumentWork_Text, IsPortalDeleted&#xA;   &#x9;&#x9;FROM [dbo].[DocumentWorkLib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.DocumentWorkLib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[DocumentWorkLib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[DocumentWorkLib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.DocumentWorkLib ON; &#xA;INSERT INTO [dbo].[DocumentWorkLib](DocumentWork_ID, DocumentWork_Text, IsPortalDeleted)&#xA;&#x9;SELECT DocumentWork_ID, DocumentWork_Text, IsPortalDeleted&#xA;   &#x9;FROM [dbo].[DocumentWorkLib_MP] &#xA;SET IDENTITY_INSERT dbo.DocumentWorkLib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Doc_Types"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Doc_Types"
      DTS:DTSID="{F66820BC-DD64-4556-91F9-D9D827A0AFB8}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Doc_Types"
      DTS:ThreadHint="21">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*Doc_Types*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[Doc_Types_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[Doc_Types]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [DocType_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [DocType_Text]&#xA;   FROM [dbo].[Doc_Types_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[Doc_Types] T &#xA;              WHERE T.DocType_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT DocType_ID FROM [dbo].[Doc_Types] T &#xA;              WHERE T.DocType_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[Doc_Types] OUTPUT Inserted.DocType_ID INTO @IdentityValue&#xA;&#x9;  SELECT DocType_Text&#xA;   &#x9;&#x9;FROM [dbo].[Doc_Types_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.Doc_Types_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[Doc_Types_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[Doc_Types_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.Doc_Types ON; &#xA;INSERT INTO [dbo].[Doc_Types](DocType_ID, DocType_Text)&#xA;&#x9;SELECT DocType_ID, DocType_Text&#xA;   &#x9;FROM [dbo].[Doc_Types_MP] &#xA;SET IDENTITY_INSERT dbo.Doc_Types OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\EarningsAllocationType"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="EarningsAllocationType"
      DTS:DTSID="{72431D31-A955-4335-93EA-3CCC7FB9DFC8}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="EarningsAllocationType"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*EarningsAllocationType*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[EarningsAllocationType_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[EarningsAllocationType]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [EarningsAllocationType_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [EarningsAllocationType_Text]&#xA;   FROM [dbo].[EarningsAllocationType_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[EarningsAllocationType] T &#xA;              WHERE T.EarningsAllocationType_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT EarningsAllocationType_ID FROM [dbo].[EarningsAllocationType] T &#xA;              WHERE T.EarningsAllocationType_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[EarningsAllocationType] OUTPUT Inserted.EarningsAllocationType_ID INTO @IdentityValue&#xA;&#x9;  SELECT EarningsAllocationType_Text&#xA;   &#x9;&#x9;FROM [dbo].[EarningsAllocationType_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.EarningsAllocationType_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[EarningsAllocationType_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[EarningsAllocationType_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.EarningsAllocationType ON; &#xA;INSERT INTO [dbo].[EarningsAllocationType](EarningsAllocationType_ID, EarningsAllocationType_Text)&#xA;&#x9;SELECT EarningsAllocationType_ID, EarningsAllocationType_Text&#xA;   &#x9;FROM [dbo].[EarningsAllocationType_MP] &#xA;SET IDENTITY_INSERT dbo.EarningsAllocationType OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Egtrra_Group"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Egtrra_Group"
      DTS:DTSID="{9DE101EE-F74C-453A-8445-51E4F3B7848F}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Egtrra_Group"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*Egtrra_Group*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[Egtrra_Group_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[Egtrra_Group]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [Egtrra_Group_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [Egtrra_Text]&#xA;   FROM [dbo].[Egtrra_Group_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[Egtrra_Group] T &#xA;              WHERE T.Egtrra_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT Egtrra_Group_ID FROM [dbo].[Egtrra_Group] T &#xA;              WHERE T.Egtrra_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[Egtrra_Group] OUTPUT Inserted.Egtrra_Group_ID INTO @IdentityValue&#xA;&#x9;  SELECT Egtrra_Text, FlagRequired, LastEdited, ByWho&#xA;   &#x9;&#x9;FROM [dbo].[Egtrra_Group_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.Egtrra_Group_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[Egtrra_Group_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[Egtrra_Group_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.Egtrra_Group ON; &#xA;INSERT INTO [dbo].[Egtrra_Group](Egtrra_Group_ID, Egtrra_Text, FlagRequired, LastEdited, ByWho)&#xA;&#x9;SELECT Egtrra_Group_ID, Egtrra_Text, FlagRequired, LastEdited, ByWho&#xA;   &#x9;FROM [dbo].[Egtrra_Group_MP] &#xA;SET IDENTITY_INSERT dbo.Egtrra_Group OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\ElementDataTypes"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="ElementDataTypes"
      DTS:DTSID="{C2B6DC6F-0E04-408F-921D-278804DBB4C2}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="ElementDataTypes"
      DTS:ThreadHint="2">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*ElementDataTypes*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[ElementDataTypes_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[ElementDataTypes]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [ElementDataTypes_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [ElementDataTypes_Text]&#xA;   FROM [dbo].[ElementDataTypes_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[ElementDataTypes] T &#xA;              WHERE T.ElementDataTypes_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT ElementDataTypes_ID FROM [dbo].[ElementDataTypes] T &#xA;              WHERE T.ElementDataTypes_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[ElementDataTypes] OUTPUT Inserted.ElementDataTypes_ID INTO @IdentityValue&#xA;&#x9;  SELECT ElementDataTypes_Text&#xA;   &#x9;&#x9;FROM [dbo].[ElementDataTypes_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.ElementDataTypes_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[ElementDataTypes_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[ElementDataTypes_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.ElementDataTypes ON; &#xA;INSERT INTO [dbo].[ElementDataTypes](ElementDataTypes_ID, ElementDataTypes_Text)&#xA;&#x9;SELECT ElementDataTypes_ID, ElementDataTypes_Text&#xA;   &#x9;FROM [dbo].[ElementDataTypes_MP] &#xA;SET IDENTITY_INSERT dbo.ElementDataTypes OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;&#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;    &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\EntryDateNear_Type"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="EntryDateNear_Type"
      DTS:DTSID="{5C20DC81-2336-47F5-A74A-A4BFDA99A4B8}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="EntryDateNear_Type"
      DTS:ThreadHint="3">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*EntryDateNear_Type*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[EntryDateNear_Type_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[EntryDateNear_Type]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [EntryDateNear_Type_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [EntryDateNear_Type_Text]&#xA;   FROM [dbo].[EntryDateNear_Type_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[EntryDateNear_Type] T &#xA;              WHERE T.EntryDateNear_Type_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT EntryDateNear_Type_ID FROM [dbo].[EntryDateNear_Type] T &#xA;              WHERE T.EntryDateNear_Type_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[EntryDateNear_Type] OUTPUT Inserted.EntryDateNear_Type_ID INTO @IdentityValue&#xA;&#x9;  SELECT EntryDateNear_Type_Text&#xA;   &#x9;&#x9;FROM [dbo].[EntryDateNear_Type_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.EntryDateNear_Type_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[EntryDateNear_Type_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[EntryDateNear_Type_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.EntryDateNear_Type ON; &#xA;INSERT INTO [dbo].[EntryDateNear_Type](EntryDateNear_Type_ID, EntryDateNear_Type_Text)&#xA;&#x9;SELECT EntryDateNear_Type_ID, EntryDateNear_Type_Text&#xA;   &#x9;FROM [dbo].[EntryDateNear_Type_MP] &#xA;SET IDENTITY_INSERT dbo.EntryDateNear_Type OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\EntryDateUM_Type"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="EntryDateUM_Type"
      DTS:DTSID="{1393045F-04C1-472E-9529-DC7FB53A4F2B}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="EntryDateUM_Type"
      DTS:ThreadHint="4">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*EntryDateUM_Type*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[EntryDateUM_Type_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[EntryDateUM_Type]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [EntryDateUM_Type_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [EntryDateUM_Type_Text]&#xA;   FROM [dbo].[EntryDateUM_Type_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[EntryDateUM_Type] T &#xA;              WHERE T.EntryDateUM_Type_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT EntryDateUM_Type_ID FROM [dbo].[EntryDateUM_Type] T &#xA;              WHERE T.EntryDateUM_Type_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[EntryDateUM_Type] OUTPUT Inserted.EntryDateUM_Type_ID INTO @IdentityValue&#xA;&#x9;  SELECT EntryDateUM_Type_Text&#xA;   &#x9;&#x9;FROM [dbo].[EntryDateUM_Type_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.EntryDateUM_Type_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[EntryDateUM_Type_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[EntryDateUM_Type_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.EntryDateUM_Type ON; &#xA;INSERT INTO [dbo].[EntryDateUM_Type](EntryDateUM_Type_ID, EntryDateUM_Type_Text)&#xA;&#x9;SELECT EntryDateUM_Type_ID, EntryDateUM_Type_Text&#xA;   &#x9;FROM [dbo].[EntryDateUM_Type_MP] &#xA;SET IDENTITY_INSERT dbo.EntryDateUM_Type OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;&#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());    &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\EntryDate_Type"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="EntryDate_Type"
      DTS:DTSID="{589F57DA-0003-4BE2-A9E4-5B1068B9A355}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="EntryDate_Type"
      DTS:ThreadHint="5">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*EntryDate_Type*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[EntryDate_Type_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[EntryDate_Type]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [EntryDate_Type_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [EntryDate_Type_Text]&#xA;   FROM [dbo].[EntryDate_Type_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[EntryDate_Type] T &#xA;              WHERE T.EntryDate_Type_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT EntryDate_Type_ID FROM [dbo].[EntryDate_Type] T &#xA;              WHERE T.EntryDate_Type_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[EntryDate_Type] OUTPUT Inserted.EntryDate_Type_ID INTO @IdentityValue&#xA;&#x9;  SELECT EntryDate_Type_Text&#xA;   &#x9;&#x9;FROM [dbo].[EntryDate_Type_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.EntryDate_Type_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[EntryDate_Type_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[EntryDate_Type_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.EntryDate_Type ON; &#xA;INSERT INTO [dbo].[EntryDate_Type](EntryDate_Type_ID, EntryDate_Type_Text)&#xA;&#x9;SELECT EntryDate_Type_ID, EntryDate_Type_Text&#xA;   &#x9;FROM [dbo].[EntryDate_Type_MP] &#xA;SET IDENTITY_INSERT dbo.EntryDate_Type OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\FormsToBeUsed_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="FormsToBeUsed_Lib"
      DTS:DTSID="{6668F456-CE75-417D-97B3-103EDF419367}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="FormsToBeUsed_Lib"
      DTS:ThreadHint="6">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*FormsToBeUsed_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[FormsToBeUsed_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[FormsToBeUsed_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [FormsToBeUsed_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [FormsToBeUsed_Lib_Text]&#xA;   FROM [dbo].[FormsToBeUsed_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[FormsToBeUsed_Lib] T &#xA;              WHERE T.FormsToBeUsed_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT FormsToBeUsed_Lib_ID FROM [dbo].[FormsToBeUsed_Lib] T &#xA;              WHERE T.FormsToBeUsed_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[FormsToBeUsed_Lib] OUTPUT Inserted.FormsToBeUsed_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT FormsToBeUsed_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[FormsToBeUsed_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.FormsToBeUsed_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[FormsToBeUsed_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[FormsToBeUsed_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.FormsToBeUsed_Lib ON; &#xA;INSERT INTO [dbo].[FormsToBeUsed_Lib](FormsToBeUsed_Lib_ID, FormsToBeUsed_Lib_Text)&#xA;&#x9;SELECT FormsToBeUsed_Lib_ID, FormsToBeUsed_Lib_Text&#xA;   &#x9;FROM [dbo].[FormsToBeUsed_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.FormsToBeUsed_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;&#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;    &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\HarshipNotes_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="HarshipNotes_Lib"
      DTS:DTSID="{D4563521-AE7C-49C6-9E12-6C61C1461CBC}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="HarshipNotes_Lib"
      DTS:ThreadHint="7">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*HarshipNotes_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[HarshipNotes_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[HarshipNotes_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [HarshipNotes_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [HarshipNotes_Lib_Text]&#xA;   FROM [dbo].[HarshipNotes_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[HarshipNotes_Lib] T &#xA;              WHERE T.HarshipNotes_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT HarshipNotes_Lib_ID FROM [dbo].[HarshipNotes_Lib] T &#xA;              WHERE T.HarshipNotes_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[HarshipNotes_Lib] OUTPUT Inserted.HarshipNotes_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT HarshipNotes_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[HarshipNotes_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.HarshipNotes_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[HarshipNotes_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[HarshipNotes_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.HarshipNotes_Lib ON; &#xA;INSERT INTO [dbo].[HarshipNotes_Lib](HarshipNotes_Lib_ID, HarshipNotes_Lib_Text)&#xA;&#x9;SELECT HarshipNotes_Lib_ID, HarshipNotes_Lib_Text&#xA;   &#x9;FROM [dbo].[HarshipNotes_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.HarshipNotes_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\InServiceNotes_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="InServiceNotes_Lib"
      DTS:DTSID="{059046E1-69EE-4BA7-B733-1E02773213E9}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="InServiceNotes_Lib"
      DTS:ThreadHint="8">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*InServiceNotes_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[InServiceNotes_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[InServiceNotes_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [InServiceNotes_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [InServiceNotes_Lib_Text]&#xA;   FROM [dbo].[InServiceNotes_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[InServiceNotes_Lib] T &#xA;              WHERE T.InServiceNotes_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT InServiceNotes_Lib_ID FROM [dbo].[InServiceNotes_Lib] T &#xA;              WHERE T.InServiceNotes_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[InServiceNotes_Lib] OUTPUT Inserted.InServiceNotes_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT InServiceNotes_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[InServiceNotes_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.InServiceNotes_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[InServiceNotes_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[InServiceNotes_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.InServiceNotes_Lib ON; &#xA;INSERT INTO [dbo].[InServiceNotes_Lib](InServiceNotes_Lib_ID, InServiceNotes_Lib_Text)&#xA;&#x9;SELECT InServiceNotes_Lib_ID, InServiceNotes_Lib_Text&#xA;   &#x9;FROM [dbo].[InServiceNotes_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.InServiceNotes_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\InterestRateType"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="InterestRateType"
      DTS:DTSID="{2AB4C6E8-67D9-43C3-96B1-A7DDF0214AB2}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="InterestRateType"
      DTS:ThreadHint="9">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*InterestRateType*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[InterestRateType_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[InterestRateType]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [InterestRateType_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [InterestRateType_Text]&#xA;   FROM [dbo].[InterestRateType_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[InterestRateType] T &#xA;              WHERE T.InterestRateType_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT InterestRateType_ID FROM [dbo].[InterestRateType] T &#xA;              WHERE T.InterestRateType_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[InterestRateType] OUTPUT Inserted.InterestRateType_ID INTO @IdentityValue&#xA;&#x9;  SELECT InterestRateType_Text&#xA;   &#x9;&#x9;FROM [dbo].[InterestRateType_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.InterestRateType_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[InterestRateType_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[InterestRateType_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.InterestRateType ON; &#xA;INSERT INTO [dbo].[InterestRateType](InterestRateType_ID, InterestRateType_Text)&#xA;&#x9;SELECT InterestRateType_ID, InterestRateType_Text&#xA;   &#x9;FROM [dbo].[InterestRateType_MP] &#xA;SET IDENTITY_INSERT dbo.InterestRateType OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\InterestRate_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="InterestRate_Lib"
      DTS:DTSID="{DDE7E9C1-E769-49FF-B872-E7C2F01C52B6}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="InterestRate_Lib"
      DTS:ThreadHint="10">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*InterestRate_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[InterestRate_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[InterestRate_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [InterestRate_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [InterestRate_Lib_Text]&#xA;   FROM [dbo].[InterestRate_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[InterestRate_Lib] T &#xA;              WHERE T.InterestRate_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT InterestRate_Lib_ID FROM [dbo].[InterestRate_Lib] T &#xA;              WHERE T.InterestRate_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[InterestRate_Lib] OUTPUT Inserted.InterestRate_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT InterestRate_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[InterestRate_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.InterestRate_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[InterestRate_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[InterestRate_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.InterestRate_Lib ON; &#xA;INSERT INTO [dbo].[InterestRate_Lib](InterestRate_Lib_ID, InterestRate_Lib_Text)&#xA;&#x9;SELECT InterestRate_Lib_ID, InterestRate_Lib_Text&#xA;   &#x9;FROM [dbo].[InterestRate_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.InterestRate_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\InvestmentPlatforms_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="InvestmentPlatforms_Lib"
      DTS:DTSID="{5CA40688-1973-41AB-8105-452566D1228C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="InvestmentPlatforms_Lib"
      DTS:ThreadHint="11">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*InvestmentPlatforms_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[InvestmentPlatforms_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[InvestmentPlatforms_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [InvestmentPlatform_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [InvestmentPlatform_Text]&#xA;   FROM [dbo].[InvestmentPlatforms_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[InvestmentPlatforms_Lib] T &#xA;              WHERE T.InvestmentPlatform_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT InvestmentPlatform_ID FROM [dbo].[InvestmentPlatforms_Lib] T &#xA;              WHERE T.InvestmentPlatform_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[InvestmentPlatforms_Lib] OUTPUT Inserted.InvestmentPlatform_ID INTO @IdentityValue&#xA;&#x9;  SELECT InvestmentPlatform_Text, InsurancePlatform, WebLink, IsPortalDeleted&#xA;   &#x9;&#x9;FROM [dbo].[InvestmentPlatforms_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.InvestmentPlatforms_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[InvestmentPlatforms_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[InvestmentPlatforms_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.InvestmentPlatforms_Lib ON; &#xA;INSERT INTO [dbo].[InvestmentPlatforms_Lib](InvestmentPlatform_ID, InvestmentPlatform_Text, InsurancePlatform, WebLink, IsPortalDeleted)&#xA;&#x9;SELECT InvestmentPlatform_ID, InvestmentPlatform_Text, InsurancePlatform, WebLink, IsPortalDeleted&#xA;   &#x9;FROM [dbo].[InvestmentPlatforms_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.InvestmentPlatforms_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\InvoiceMethod_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="InvoiceMethod_Lib"
      DTS:DTSID="{69B9666C-37D5-4E2B-BB45-898F6EE9ED1B}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="InvoiceMethod_Lib"
      DTS:ThreadHint="12">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*InvoiceMethod_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[InvoiceMethod_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[InvoiceMethod_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [InvoiceMethod_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [InvoiceMethod_Text]&#xA;   FROM [dbo].[InvoiceMethod_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[InvoiceMethod_Lib] T &#xA;              WHERE T.InvoiceMethod_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT InvoiceMethod_ID FROM [dbo].[InvoiceMethod_Lib] T &#xA;              WHERE T.InvoiceMethod_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[InvoiceMethod_Lib] OUTPUT Inserted.InvoiceMethod_ID INTO @IdentityValue&#xA;&#x9;  SELECT InvoiceMethod_Text&#xA;   &#x9;&#x9;FROM [dbo].[InvoiceMethod_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.InvoiceMethod_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[InvoiceMethod_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[InvoiceMethod_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.InvoiceMethod_Lib ON; &#xA;INSERT INTO [dbo].[InvoiceMethod_Lib](InvoiceMethod_ID, InvoiceMethod_Text)&#xA;&#x9;SELECT InvoiceMethod_ID, InvoiceMethod_Text&#xA;   &#x9;FROM [dbo].[InvoiceMethod_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.InvoiceMethod_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\LoanCharge"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="LoanCharge"
      DTS:DTSID="{A797C1EB-8694-4B97-9309-D58858098B89}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="LoanCharge"
      DTS:ThreadHint="13">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*LoanCharge*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(MAX), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[LoanCharge_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[LoanCharge]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [ID],&#xA;&#x9;&#x9;&#x9;@LibName = [LoanChargeAmount]&#xA;   FROM [dbo].[LoanCharge_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[LoanCharge] T &#xA;              WHERE T.[LoanChargeAmount] = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT TOP 1 [ID] FROM [dbo].[LoanCharge] T &#xA;              WHERE T.[LoanChargeAmount] = @LibName)&#xA;&#x9;PRINT @NewID&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;IF(@OldID = -1)&#xA;&#x9;BEGIN&#xA;&#x9;SET IDENTITY_INSERT dbo.LoanCharge ON; &#xA;&#x9;INSERT INTO [dbo].[LoanCharge]([ID], [LoanChargeAmount]) OUTPUT Inserted.[ID] INTO @IdentityValue&#xA;&#x9;&#x9;SELECT [ID], [LoanChargeAmount]&#xA;   &#x9;&#x9;FROM [dbo].[LoanCharge_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET IDENTITY_INSERT dbo.LoanCharge OFF;&#xA;&#x9;END&#xA;&#x9;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[LoanCharge] OUTPUT Inserted.[ID] INTO @IdentityValue&#xA;&#x9;  SELECT [LoanChargeAmount]&#xA;   &#x9;&#x9;FROM [dbo].[LoanCharge_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;END&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;&#x9;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.LoanCharge_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[LoanCharge_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[LoanCharge_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.LoanCharge ON; &#xA;INSERT INTO [dbo].[LoanCharge]([ID], [LoanChargeAmount])&#xA;&#x9;SELECT [ID], [LoanChargeAmount]&#xA;   &#x9;FROM [dbo].[LoanCharge_MP] &#xA;SET IDENTITY_INSERT dbo.LoanCharge OFF;&#xA;END  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;   &#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;   &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\LoanFee_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="LoanFee_Lib"
      DTS:DTSID="{0AA6D289-C738-4099-B1D5-91C97C05626F}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="LoanFee_Lib"
      DTS:ThreadHint="14">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*LoanFee_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(MAX), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[LoanFee_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[LoanFee_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [LoanFee_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [LoanFee_Lib_Text]&#xA;   FROM [dbo].[LoanFee_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[LoanFee_Lib] T &#xA;              WHERE T.[LoanFee_Lib_Text] = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT TOP 1 [LoanFee_Lib_ID] FROM [dbo].[LoanFee_Lib] T &#xA;              WHERE T.[LoanFee_Lib_Text] = @LibName)&#xA;&#x9;PRINT @NewID&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;IF(@OldID = -1)&#xA;&#x9;BEGIN&#xA;&#x9;SET IDENTITY_INSERT dbo.LoanFee_Lib ON; &#xA;&#x9;INSERT INTO [dbo].[LoanFee_Lib](LoanFee_Lib_ID,LoanFee_Lib_Text) OUTPUT Inserted.[LoanFee_Lib_ID] INTO @IdentityValue&#xA;&#x9;&#x9;SELECT LoanFee_Lib_ID,LoanFee_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[LoanFee_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET IDENTITY_INSERT dbo.LoanFee_Lib OFF;&#xA;&#x9;END&#xA;&#x9;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[LoanFee_Lib] OUTPUT Inserted.[LoanFee_Lib_ID] INTO @IdentityValue&#xA;&#x9;  SELECT LoanFee_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[LoanFee_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;END&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;&#x9;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.LoanFee_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[LoanFee_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[LoanFee_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.LoanFee_Lib ON; &#xA;INSERT INTO [dbo].[LoanFee_Lib](LoanFee_Lib_ID,LoanFee_Lib_Text)&#xA;&#x9;SELECT LoanFee_Lib_ID,LoanFee_Lib_Text&#xA;   &#x9;FROM [dbo].[LoanFee_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.LoanFee_Lib OFF;&#xA;END  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;   &#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;   &#xA;GO  &#xA;    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\LoanPurposeType"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="LoanPurposeType"
      DTS:DTSID="{FA8A8CD8-4830-462E-9EE8-320F0C09DF16}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="LoanPurposeType"
      DTS:ThreadHint="15">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*LoanPurposeType*/&#xA;BEGIN TRANSACTION;&#xA;&#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;    @MaxId = MAX(LoopId)&#xA;FROM [dbo].[LoanPurposeType_MP]&#xA;&#xA;IF ((SELECT COUNT(*)&#xA;FROM [dbo].[LoanPurposeType]) &gt; 0)&#xA;BEGIN&#xA;    WHILE ( @LoopCounter IS NOT NULL&#xA;        AND @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;        SELECT @OldID = [LoanPurposeType_ID],&#xA;            @LibName = [LoanPurposeType_Text]&#xA;        FROM [dbo].[LoanPurposeType_MP]&#xA;        WHERE LoopId = @LoopCounter&#xA;        PRINT @LibName&#xA;&#xA;&#xA;        IF EXISTS(SELECT 1&#xA;        FROM [dbo].[LoanPurposeType] T&#xA;        WHERE T.LoanPurposeType_Text = @LibName) &#xA;BEGIN&#xA;            SET @NewID = (SELECT LoanPurposeType_ID&#xA;            FROM [dbo].[LoanPurposeType] T&#xA;            WHERE T.LoanPurposeType_Text = @LibName)&#xA;        END&#xA;ELSE&#xA;BEGIN&#xA;            INSERT INTO [dbo].[LoanPurposeType]&#xA;            OUTPUT Inserted.LoanPurposeType_ID INTO @IdentityValue&#xA;            SELECT LoanPurposeType_Text&#xA;            FROM [dbo].[LoanPurposeType_MP]&#xA;            WHERE LoopId = @LoopCounter&#xA;            SET @NewID = (SELECT TOP 1&#xA;                ID&#xA;            FROM @IdentityValue);&#xA;            PRINT 'Data inserted'&#xA;            DELETE FROM @IdentityValue;&#xA;        END&#xA;&#xA;        IF OBJECT_ID('dbo.LoanPurposeType_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;            INSERT INTO [dbo].[LoanPurposeType_ID_Mapping]&#xA;            VALUES(@OldID, @NewID)&#xA;        END&#xA;&#xA;        SELECT @LoopCounter  = MIN(LoopId)&#xA;        FROM [dbo].[LoanPurposeType_MP]&#xA;        WHERE LoopId &gt; @LoopCounter&#xA;&#xA;    END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;    SET IDENTITY_INSERT dbo.LoanPurposeType ON;&#xA;    INSERT INTO [dbo].[LoanPurposeType]&#xA;        (LoanPurposeType_ID, LoanPurposeType_Text)&#xA;    SELECT LoanPurposeType_ID, LoanPurposeType_Text&#xA;    FROM [dbo].[LoanPurposeType_MP]&#xA;    SET IDENTITY_INSERT dbo.LoanPurposeType OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;VALUES&#xA;    (SUSER_SNAME(),&#xA;        ERROR_NUMBER(),&#xA;        ERROR_STATE(),&#xA;        ERROR_SEVERITY(),&#xA;        ERROR_LINE(),&#xA;        ERROR_PROCEDURE(),&#xA;        ERROR_MESSAGE(),&#xA;        GETDATE());  &#xA;  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;END CATCH;&#xA;&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\LoanPurpose_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="LoanPurpose_Lib"
      DTS:DTSID="{9C6DE60D-0BA1-43C0-827C-2ABD6910E3FE}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="LoanPurpose_Lib"
      DTS:ThreadHint="16">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*LoanPurpose_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(MAX), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[LoanPurpose_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[LoanPurpose_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [LoanPurpose_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [LoanPurpose_Lib_Text]&#xA;   FROM [dbo].[LoanPurpose_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[LoanPurpose_Lib] T &#xA;              WHERE T.[LoanPurpose_Lib_Text] = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT TOP 1 [LoanPurpose_Lib_ID] FROM [dbo].[LoanPurpose_Lib] T &#xA;              WHERE T.[LoanPurpose_Lib_Text] = @LibName)&#xA;&#x9;PRINT @NewID&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;IF(@OldID = -1)&#xA;&#x9;BEGIN&#xA;&#x9;SET IDENTITY_INSERT dbo.LoanPurpose_Lib ON; &#xA;&#x9;INSERT INTO [dbo].[LoanPurpose_Lib](LoanPurpose_Lib_ID,LoanPurpose_Lib_Text) OUTPUT Inserted.[LoanPurpose_Lib_ID] INTO @IdentityValue&#xA;&#x9;&#x9;SELECT LoanPurpose_Lib_ID,LoanPurpose_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[LoanPurpose_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET IDENTITY_INSERT dbo.LoanPurpose_Lib OFF;&#xA;&#x9;END&#xA;&#x9;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[LoanPurpose_Lib] OUTPUT Inserted.[LoanPurpose_Lib_ID] INTO @IdentityValue&#xA;&#x9;  SELECT LoanPurpose_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[LoanPurpose_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;END&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;&#x9;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.LoanPurpose_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[LoanPurpose_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[LoanPurpose_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.LoanPurpose_Lib ON; &#xA;INSERT INTO [dbo].[LoanPurpose_Lib](LoanPurpose_Lib_ID,LoanPurpose_Lib_Text)&#xA;&#x9;SELECT LoanPurpose_Lib_ID,LoanPurpose_Lib_Text&#xA;   &#x9;FROM [dbo].[LoanPurpose_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.LoanPurpose_Lib OFF;&#xA;END  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;   &#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;   &#xA;GO  &#xA;    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\LoanRefinanceCharge"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="LoanRefinanceCharge"
      DTS:DTSID="{060178AB-1953-42C3-9B28-A6190159F39A}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="LoanRefinanceCharge"
      DTS:ThreadHint="17">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*LoanRefinanceCharge*/&#xA;BEGIN TRANSACTION;&#xA;&#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;    @MaxId = MAX(LoopId)&#xA;FROM [dbo].[LoanRefinanceCharge_MP]&#xA;&#xA;IF ((SELECT COUNT(*)&#xA;FROM [dbo].[LoanRefinanceCharge]) &gt; 0)&#xA;BEGIN&#xA;    WHILE ( @LoopCounter IS NOT NULL&#xA;        AND @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;        SELECT @OldID = [ID],&#xA;            @LibName = [LoanRefinanceChargeAmount]&#xA;        FROM [dbo].[LoanRefinanceCharge_MP]&#xA;        WHERE LoopId = @LoopCounter&#xA;        PRINT @LibName&#xA;&#xA;&#xA;        IF EXISTS(SELECT 1&#xA;        FROM [dbo].[LoanRefinanceCharge] T&#xA;        WHERE T.LoanRefinanceChargeAmount = @LibName) &#xA;BEGIN&#xA;            SET @NewID = (SELECT ID&#xA;            FROM [dbo].[LoanRefinanceCharge] T&#xA;            WHERE T.LoanRefinanceChargeAmount = @LibName)&#xA;        END&#xA;ELSE&#xA;BEGIN&#xA;            INSERT INTO [dbo].[LoanRefinanceCharge]&#xA;            OUTPUT Inserted.ID INTO @IdentityValue&#xA;            SELECT LoanRefinanceChargeAmount&#xA;            FROM [dbo].[LoanRefinanceCharge_MP]&#xA;            WHERE LoopId = @LoopCounter&#xA;            SET @NewID = (SELECT TOP 1&#xA;                ID&#xA;            FROM @IdentityValue);&#xA;            PRINT 'Data inserted'&#xA;            DELETE FROM @IdentityValue;&#xA;        END&#xA;&#xA;        IF OBJECT_ID('dbo.LoanRefinanceCharge_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;            INSERT INTO [dbo].[LoanRefinanceCharge_ID_Mapping]&#xA;            VALUES(@OldID, @NewID)&#xA;        END&#xA;&#xA;        SELECT @LoopCounter  = MIN(LoopId)&#xA;        FROM [dbo].[LoanRefinanceCharge_MP]&#xA;        WHERE LoopId &gt; @LoopCounter&#xA;&#xA;    END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;    SET IDENTITY_INSERT dbo.LoanRefinanceCharge ON;&#xA;    INSERT INTO [dbo].[LoanRefinanceCharge]&#xA;        (ID, LoanRefinanceChargeAmount)&#xA;    SELECT ID, LoanRefinanceChargeAmount&#xA;    FROM [dbo].[LoanRefinanceCharge_MP]&#xA;    SET IDENTITY_INSERT dbo.LoanRefinanceCharge OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;VALUES&#xA;    (SUSER_SNAME(),&#xA;        ERROR_NUMBER(),&#xA;        ERROR_STATE(),&#xA;        ERROR_SEVERITY(),&#xA;        ERROR_LINE(),&#xA;        ERROR_PROCEDURE(),&#xA;        ERROR_MESSAGE(),&#xA;        GETDATE());  &#xA;  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;END CATCH;&#xA;&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\LoanTaxCode1099_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="LoanTaxCode1099_Lib"
      DTS:DTSID="{221CCA31-746D-4699-88C6-B19E4D14746F}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="LoanTaxCode1099_Lib"
      DTS:ThreadHint="18">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*LoanTaxCode1099_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(MAX), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[LoanTaxCode1099_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[LoanTaxCode1099_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [LoanTaxCode1099_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [LoanTaxCode1099_Lib_Text]&#xA;   FROM [dbo].[LoanTaxCode1099_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[LoanTaxCode1099_Lib] T &#xA;              WHERE T.[LoanTaxCode1099_Lib_Text] = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT TOP 1 [LoanTaxCode1099_Lib_ID] FROM [dbo].[LoanTaxCode1099_Lib] T &#xA;              WHERE T.[LoanTaxCode1099_Lib_Text] = @LibName)&#xA;&#x9;PRINT @NewID&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;IF(@OldID = -1)&#xA;&#x9;BEGIN&#xA;&#x9;SET IDENTITY_INSERT dbo.LoanTaxCode1099_Lib ON; &#xA;&#x9;INSERT INTO [dbo].[LoanTaxCode1099_Lib](LoanTaxCode1099_Lib_ID,LoanTaxCode1099_Lib_Text) OUTPUT Inserted.[LoanTaxCode1099_Lib_ID] INTO @IdentityValue&#xA;&#x9;&#x9;SELECT LoanTaxCode1099_Lib_ID,LoanTaxCode1099_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[LoanTaxCode1099_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET IDENTITY_INSERT dbo.LoanTaxCode1099_Lib OFF;&#xA;&#x9;END&#xA;&#x9;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[LoanTaxCode1099_Lib] OUTPUT Inserted.[LoanTaxCode1099_Lib_ID] INTO @IdentityValue&#xA;&#x9;  SELECT LoanTaxCode1099_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[LoanTaxCode1099_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;END&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;&#x9;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.LoanTaxCode1099_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[LoanTaxCode1099_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[LoanTaxCode1099_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.LoanTaxCode1099_Lib ON; &#xA;INSERT INTO [dbo].[LoanTaxCode1099_Lib](LoanTaxCode1099_Lib_ID,LoanTaxCode1099_Lib_Text)&#xA;&#x9;SELECT LoanTaxCode1099_Lib_ID,LoanTaxCode1099_Lib_Text&#xA;   &#x9;FROM [dbo].[LoanTaxCode1099_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.LoanTaxCode1099_Lib OFF;&#xA;END  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;   &#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;   &#xA;GO  &#xA;    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\ManditoryAutoRolloverProvisions_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="ManditoryAutoRolloverProvisions_Lib"
      DTS:DTSID="{7BBF0152-5EFE-44DF-B67E-AB8AB26BEF73}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="ManditoryAutoRolloverProvisions_Lib"
      DTS:ThreadHint="19">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*ManditoryAutoRolloverProvisions_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[ManditoryAutoRolloverProvisions_Lib_MP]&#xA;&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [ManditoryAutoRolloverProvisions_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [ManditoryAutoRolloverProvisions_Lib_Text]&#xA;   FROM [dbo].[ManditoryAutoRolloverProvisions_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[ManditoryAutoRolloverProvisions_Lib] T &#xA;              WHERE T.ManditoryAutoRolloverProvisions_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT ManditoryAutoRolloverProvisions_Lib_ID FROM [dbo].[ManditoryAutoRolloverProvisions_Lib] T &#xA;              WHERE T.ManditoryAutoRolloverProvisions_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[ManditoryAutoRolloverProvisions_Lib] OUTPUT Inserted.ManditoryAutoRolloverProvisions_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT ManditoryAutoRolloverProvisions_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[ManditoryAutoRolloverProvisions_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.ManditoryAutoRolloverProvisions_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[ManditoryAutoRolloverProvisions_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[ManditoryAutoRolloverProvisions_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\ManditoryCashOutProvisions_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="ManditoryCashOutProvisions_Lib"
      DTS:DTSID="{20D62215-0894-4699-A15F-479D8FFD500D}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="ManditoryCashOutProvisions_Lib"
      DTS:ThreadHint="20">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*ManditoryCashOutProvisions_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[ManditoryCashOutProvisions_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[ManditoryCashOutProvisions_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [ManditoryCashOutProvisions_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [ManditoryCashOutProvisions_Lib_Text]&#xA;   FROM [dbo].[ManditoryCashOutProvisions_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[ManditoryCashOutProvisions_Lib] T &#xA;              WHERE T.ManditoryCashOutProvisions_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT ManditoryCashOutProvisions_Lib_ID FROM [dbo].[ManditoryCashOutProvisions_Lib] T &#xA;              WHERE T.ManditoryCashOutProvisions_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[ManditoryCashOutProvisions_Lib] OUTPUT Inserted.ManditoryCashOutProvisions_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT ManditoryCashOutProvisions_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[ManditoryCashOutProvisions_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.ManditoryCashOutProvisions_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[ManditoryCashOutProvisions_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[ManditoryCashOutProvisions_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.ManditoryCashOutProvisions_Lib ON; &#xA;INSERT INTO [dbo].[ManditoryCashOutProvisions_Lib](ManditoryCashOutProvisions_Lib_ID, ManditoryCashOutProvisions_Lib_Text)&#xA;&#x9;SELECT ManditoryCashOutProvisions_Lib_ID, ManditoryCashOutProvisions_Lib_Text&#xA;   &#x9;FROM [dbo].[ManditoryCashOutProvisions_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.ManditoryCashOutProvisions_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\MatchPeriodType"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="MatchPeriodType"
      DTS:DTSID="{AF1C8046-DDCA-4F8B-BDAF-5E5140C8564C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="MatchPeriodType"
      DTS:ThreadHint="27">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*MatchPeriodType*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[MatchPeriodType_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[MatchPeriodType]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [MatchPeriodType_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [MatchPeriodType_Text]&#xA;   FROM [dbo].[MatchPeriodType_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[MatchPeriodType] T &#xA;              WHERE T.MatchPeriodType_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT MatchPeriodType_ID FROM [dbo].[MatchPeriodType] T &#xA;              WHERE T.MatchPeriodType_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[MatchPeriodType] OUTPUT Inserted.MatchPeriodType_ID INTO @IdentityValue&#xA;&#x9;  SELECT MatchPeriodType_Text&#xA;   &#x9;&#x9;FROM [dbo].[MatchPeriodType_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.MatchPeriodType_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[MatchPeriodType_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[MatchPeriodType_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.MatchPeriodType ON; &#xA;INSERT INTO [dbo].[MatchPeriodType](MatchPeriodType_ID, MatchPeriodType_Text)&#xA;&#x9;SELECT MatchPeriodType_ID, MatchPeriodType_Text&#xA;   &#x9;FROM [dbo].[MatchPeriodType_MP] &#xA;SET IDENTITY_INSERT dbo.MatchPeriodType OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\MatchType"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="MatchType"
      DTS:DTSID="{C0BD75EC-CFB5-4743-ADEB-7C99D935DA2D}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="MatchType"
      DTS:ThreadHint="45">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*MatchType*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[MatchType_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[MatchType]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [MatchType_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [MatchType_Text]&#xA;   FROM [dbo].[MatchType_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[MatchType] T &#xA;              WHERE T.MatchType_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT MatchType_ID FROM [dbo].[MatchType] T &#xA;              WHERE T.MatchType_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[MatchType] OUTPUT Inserted.MatchType_ID INTO @IdentityValue&#xA;&#x9;  SELECT MatchType_Text&#xA;   &#x9;&#x9;FROM [dbo].[MatchType_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.MatchType_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[MatchType_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[MatchType_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.MatchType ON; &#xA;INSERT INTO [dbo].[MatchType](MatchType_ID, MatchType_Text)&#xA;&#x9;SELECT MatchType_ID, MatchType_Text&#xA;   &#x9;FROM [dbo].[MatchType_MP] &#xA;SET IDENTITY_INSERT dbo.MatchType OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\MortalityType"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="MortalityType"
      DTS:DTSID="{BB30ED90-D481-4B06-8F61-C28C39825B5C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="MortalityType"
      DTS:ThreadHint="46">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*MortalityType*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[MortalityType_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[MortalityType]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [MortalityType_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [MortalityType_Text]&#xA;   FROM [dbo].[MortalityType_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[MortalityType] T &#xA;              WHERE T.MortalityType_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT MortalityType_ID FROM [dbo].[MortalityType] T &#xA;              WHERE T.MortalityType_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[MortalityType] OUTPUT Inserted.MortalityType_ID INTO @IdentityValue&#xA;&#x9;  SELECT MortalityType_Text&#xA;   &#x9;&#x9;FROM [dbo].[MortalityType_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.MortalityType_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[MortalityType_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[MortalityType_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.MortalityType ON; &#xA;INSERT INTO [dbo].[MortalityType](MortalityType_ID, MortalityType_Text)&#xA;&#x9;SELECT MortalityType_ID, MortalityType_Text&#xA;   &#x9;FROM [dbo].[MortalityType_MP] &#xA;SET IDENTITY_INSERT dbo.MortalityType OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;&#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;    &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\NoQBSReason_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="NoQBSReason_Lib"
      DTS:DTSID="{FF705752-4226-4056-A3EA-773B03DCCE60}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="NoQBSReason_Lib"
      DTS:ThreadHint="47">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*NoQBSReason_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[NoQBSReason_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[NoQBSReason_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [NoQBSReason_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [NoQBSReason_Lib_Text]&#xA;   FROM [dbo].[NoQBSReason_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[NoQBSReason_Lib] T &#xA;              WHERE T.NoQBSReason_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT NoQBSReason_Lib_ID FROM [dbo].[NoQBSReason_Lib] T &#xA;              WHERE T.NoQBSReason_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[NoQBSReason_Lib] OUTPUT Inserted.NoQBSReason_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT NoQBSReason_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[NoQBSReason_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.NoQBSReason_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[NoQBSReason_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[NoQBSReason_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.NoQBSReason_Lib ON; &#xA;INSERT INTO [dbo].[NoQBSReason_Lib](NoQBSReason_Lib_ID, NoQBSReason_Lib_Text)&#xA;&#x9;SELECT NoQBSReason_Lib_ID, NoQBSReason_Lib_Text&#xA;   &#x9;FROM [dbo].[NoQBSReason_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.NoQBSReason_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\NormalFormOfBenefit_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="NormalFormOfBenefit_Lib"
      DTS:DTSID="{890D6612-5D26-4F22-B9D1-910D6FE7E5CF}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="NormalFormOfBenefit_Lib"
      DTS:ThreadHint="48">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*NormalFormOfBenefit_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[NormalFormOfBenefit_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[NormalFormOfBenefit_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [NormalFormOfBenefit_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [NormalFormOfBenefit_Lib_Text]&#xA;   FROM [dbo].[NormalFormOfBenefit_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[NormalFormOfBenefit_Lib] T &#xA;              WHERE T.NormalFormOfBenefit_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT NormalFormOfBenefit_Lib_ID FROM [dbo].[NormalFormOfBenefit_Lib] T &#xA;              WHERE T.NormalFormOfBenefit_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[NormalFormOfBenefit_Lib] OUTPUT Inserted.NormalFormOfBenefit_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT NormalFormOfBenefit_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[NormalFormOfBenefit_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.NormalFormOfBenefit_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[NormalFormOfBenefit_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[NormalFormOfBenefit_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.NormalFormOfBenefit_Lib ON; &#xA;INSERT INTO [dbo].[NormalFormOfBenefit_Lib](NormalFormOfBenefit_Lib_ID, NormalFormOfBenefit_Lib_Text)&#xA;&#x9;SELECT NormalFormOfBenefit_Lib_ID, NormalFormOfBenefit_Lib_Text&#xA;   &#x9;FROM [dbo].[NormalFormOfBenefit_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.NormalFormOfBenefit_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\NormalRetirementAge_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="NormalRetirementAge_Lib"
      DTS:DTSID="{4C8F761A-56B6-422A-9DF3-20CE2E582CC6}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="NormalRetirementAge_Lib"
      DTS:ThreadHint="49">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*NormalRetirementAge_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[NormalRetirementAge_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[NormalRetirementAge_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [NormalRetirementAge_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [NormalRetirementAge_Lib_Text]&#xA;   FROM [dbo].[NormalRetirementAge_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[NormalRetirementAge_Lib] T &#xA;              WHERE T.NormalRetirementAge_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT NormalRetirementAge_Lib_ID FROM [dbo].[NormalRetirementAge_Lib] T &#xA;              WHERE T.NormalRetirementAge_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[NormalRetirementAge_Lib] OUTPUT Inserted.NormalRetirementAge_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT NormalRetirementAge_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[NormalRetirementAge_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.NormalRetirementAge_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[NormalRetirementAge_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[NormalRetirementAge_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.NormalRetirementAge_Lib ON; &#xA;INSERT INTO [dbo].[NormalRetirementAge_Lib](NormalRetirementAge_Lib_ID, NormalRetirementAge_Lib_Text)&#xA;&#x9;SELECT NormalRetirementAge_Lib_ID, NormalRetirementAge_Lib_Text&#xA;   &#x9;FROM [dbo].[NormalRetirementAge_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.NormalRetirementAge_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\NormalRetirementDate_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="NormalRetirementDate_Lib"
      DTS:DTSID="{C767A4EB-9450-4075-81F8-E26E96D170BA}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="NormalRetirementDate_Lib"
      DTS:ThreadHint="50">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*NormalRetirementDate_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[NormalRetirementDate_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[NormalRetirementDate_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [NormalRetirementDate_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [NormalRetirementDate_Lib_Text]&#xA;   FROM [dbo].[NormalRetirementDate_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[NormalRetirementDate_Lib] T &#xA;              WHERE T.NormalRetirementDate_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT NormalRetirementDate_Lib_ID FROM [dbo].[NormalRetirementDate_Lib] T &#xA;              WHERE T.NormalRetirementDate_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[NormalRetirementDate_Lib] OUTPUT Inserted.NormalRetirementDate_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT NormalRetirementDate_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[NormalRetirementDate_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.NormalRetirementDate_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[NormalRetirementDate_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[NormalRetirementDate_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.NormalRetirementDate_Lib ON; &#xA;INSERT INTO [dbo].[NormalRetirementDate_Lib](NormalRetirementDate_Lib_ID, NormalRetirementDate_Lib_Text)&#xA;&#x9;SELECT NormalRetirementDate_Lib_ID, NormalRetirementDate_Lib_Text&#xA;   &#x9;FROM [dbo].[NormalRetirementDate_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.NormalRetirementDate_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\NormRetireDateNear_Type"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="NormRetireDateNear_Type"
      DTS:DTSID="{3111E5B0-7DCB-4032-8212-58B4F6876DB4}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="NormRetireDateNear_Type"
      DTS:ThreadHint="51">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*NormRetireDateNear_Type*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[NormRetireDateNear_Type_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[NormRetireDateNear_Type]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [NormRetireDateNear_Type_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [NormRetireDateNear_Type_Text]&#xA;   FROM [dbo].[NormRetireDateNear_Type_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[NormRetireDateNear_Type] T &#xA;              WHERE T.NormRetireDateNear_Type_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT NormRetireDateNear_Type_ID FROM [dbo].[NormRetireDateNear_Type] T &#xA;              WHERE T.NormRetireDateNear_Type_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[NormRetireDateNear_Type] OUTPUT Inserted.NormRetireDateNear_Type_ID INTO @IdentityValue&#xA;&#x9;  SELECT NormRetireDateNear_Type_Text&#xA;   &#x9;&#x9;FROM [dbo].[NormRetireDateNear_Type_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.NormRetireDateNear_Type_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[NormRetireDateNear_Type_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[NormRetireDateNear_Type_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.NormRetireDateNear_Type ON; &#xA;INSERT INTO [dbo].[NormRetireDateNear_Type](NormRetireDateNear_Type_ID, NormRetireDateNear_Type_Text)&#xA;&#x9;SELECT NormRetireDateNear_Type_ID, NormRetireDateNear_Type_Text&#xA;   &#x9;FROM [dbo].[NormRetireDateNear_Type_MP] &#xA;SET IDENTITY_INSERT dbo.NormRetireDateNear_Type OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\NormRetireDateUM_Type"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="NormRetireDateUM_Type"
      DTS:DTSID="{25C00266-B217-4545-B4D0-56F6C89BE6E0}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="NormRetireDateUM_Type"
      DTS:ThreadHint="52">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*NormRetireDateUM_Type*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[NormRetireDateUM_Type_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[NormRetireDateUM_Type]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [NormRetireDateUM_Type_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [NormRetireDateUM_Type_Text]&#xA;   FROM [dbo].[NormRetireDateUM_Type_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[NormRetireDateUM_Type] T &#xA;              WHERE T.NormRetireDateUM_Type_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT NormRetireDateUM_Type_ID FROM [dbo].[NormRetireDateUM_Type] T &#xA;              WHERE T.NormRetireDateUM_Type_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[NormRetireDateUM_Type] OUTPUT Inserted.NormRetireDateUM_Type_ID INTO @IdentityValue&#xA;&#x9;  SELECT NormRetireDateUM_Type_Text&#xA;   &#x9;&#x9;FROM [dbo].[NormRetireDateUM_Type_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.NormRetireDateUM_Type_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[NormRetireDateUM_Type_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[NormRetireDateUM_Type_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.NormRetireDateUM_Type ON; &#xA;INSERT INTO [dbo].[NormRetireDateUM_Type](NormRetireDateUM_Type_ID, NormRetireDateUM_Type_Text)&#xA;&#x9;SELECT NormRetireDateUM_Type_ID, NormRetireDateUM_Type_Text&#xA;   &#x9;FROM [dbo].[NormRetireDateUM_Type_MP] &#xA;SET IDENTITY_INSERT dbo.NormRetireDateUM_Type OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\NormRetireDate_Type"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="NormRetireDate_Type"
      DTS:DTSID="{F5B8F13E-1F85-4D30-BE01-842A43A97548}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="NormRetireDate_Type"
      DTS:ThreadHint="53">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*NormRetireDate_Type*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[NormRetireDate_Type_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[NormRetireDate_Type]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [NormRetireDate_Type_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [NormRetireDate_Type_Text]&#xA;   FROM [dbo].[NormRetireDate_Type_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[NormRetireDate_Type] T &#xA;              WHERE T.NormRetireDate_Type_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT NormRetireDate_Type_ID FROM [dbo].[NormRetireDate_Type] T &#xA;              WHERE T.NormRetireDate_Type_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[NormRetireDate_Type] OUTPUT Inserted.NormRetireDate_Type_ID INTO @IdentityValue&#xA;&#x9;  SELECT NormRetireDate_Type_Text&#xA;   &#x9;&#x9;FROM [dbo].[NormRetireDate_Type_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.NormRetireDate_Type_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[NormRetireDate_Type_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[NormRetireDate_Type_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.NormRetireDate_Type ON; &#xA;INSERT INTO [dbo].[NormRetireDate_Type](NormRetireDate_Type_ID, NormRetireDate_Type_Text)&#xA;&#x9;SELECT NormRetireDate_Type_ID, NormRetireDate_Type_Text&#xA;   &#x9;FROM [dbo].[NormRetireDate_Type_MP] &#xA;SET IDENTITY_INSERT dbo.NormRetireDate_Type OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\NormRetireForm_Type"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="NormRetireForm_Type"
      DTS:DTSID="{6449FA64-F663-495A-9E7D-0F53241B0182}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="NormRetireForm_Type"
      DTS:ThreadHint="54">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*NormRetireForm_Type*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[NormRetireForm_Type_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[NormRetireForm_Type]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [NormRetireForm_Type_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [NormRetireForm_Type_Text]&#xA;   FROM [dbo].[NormRetireForm_Type_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[NormRetireForm_Type] T &#xA;              WHERE T.NormRetireForm_Type_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT NormRetireForm_Type_ID FROM [dbo].[NormRetireForm_Type] T &#xA;              WHERE T.NormRetireForm_Type_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[NormRetireForm_Type] OUTPUT Inserted.NormRetireForm_Type_ID INTO @IdentityValue&#xA;&#x9;  SELECT NormRetireForm_Type_Text&#xA;   &#x9;&#x9;FROM [dbo].[NormRetireForm_Type_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.NormRetireForm_Type_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[NormRetireForm_Type_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[NormRetireForm_Type_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.NormRetireForm_Type ON; &#xA;INSERT INTO [dbo].[NormRetireForm_Type](NormRetireForm_Type_ID, NormRetireForm_Type_Text)&#xA;&#x9;SELECT NormRetireForm_Type_ID, NormRetireForm_Type_Text&#xA;   &#x9;FROM [dbo].[NormRetireForm_Type_MP] &#xA;SET IDENTITY_INSERT dbo.NormRetireForm_Type OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\NumberAllowed_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="NumberAllowed_Lib"
      DTS:DTSID="{E78DC8C3-1DC7-4AD3-B143-EA09C8D7A60D}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="NumberAllowed_Lib"
      DTS:ThreadHint="55">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*NumberAllowed_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[NumberAllowed_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[NumberAllowed_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [NumberAllowed_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [NumberAllowed_Lib_Text]&#xA;   FROM [dbo].[NumberAllowed_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[NumberAllowed_Lib] T &#xA;              WHERE T.NumberAllowed_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT NumberAllowed_Lib_ID FROM [dbo].[NumberAllowed_Lib] T &#xA;              WHERE T.NumberAllowed_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[NumberAllowed_Lib] OUTPUT Inserted.NumberAllowed_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT NumberAllowed_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[NumberAllowed_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.NumberAllowed_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[NumberAllowed_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[NumberAllowed_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.NumberAllowed_Lib ON; &#xA;INSERT INTO [dbo].[NumberAllowed_Lib](NumberAllowed_Lib_ID, NumberAllowed_Lib_Text)&#xA;&#x9;SELECT NumberAllowed_Lib_ID, NumberAllowed_Lib_Text&#xA;   &#x9;FROM [dbo].[NumberAllowed_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.NumberAllowed_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;    &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\PayrollFrequency_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="PayrollFrequency_Lib"
      DTS:DTSID="{111A2DFD-C7A7-4E40-8BFF-4B9747D69918}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="PayrollFrequency_Lib"
      DTS:ThreadHint="56">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*PayrollFrequency_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[PayrollFrequency_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[PayrollFrequency_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [PayrollFrequency_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [PayrollFrequency_Lib_Text]&#xA;   FROM [dbo].[PayrollFrequency_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[PayrollFrequency_Lib] T &#xA;              WHERE T.PayrollFrequency_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT PayrollFrequency_Lib_ID FROM [dbo].[PayrollFrequency_Lib] T &#xA;              WHERE T.PayrollFrequency_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[PayrollFrequency_Lib] OUTPUT Inserted.PayrollFrequency_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT PayrollFrequency_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[PayrollFrequency_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.PayrollFrequency_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[PayrollFrequency_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[PayrollFrequency_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.PayrollFrequency_Lib ON; &#xA;INSERT INTO [dbo].[PayrollFrequency_Lib](PayrollFrequency_Lib_ID, PayrollFrequency_Lib_Text)&#xA;&#x9;SELECT PayrollFrequency_Lib_ID, PayrollFrequency_Lib_Text&#xA;   &#x9;FROM [dbo].[PayrollFrequency_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.PayrollFrequency_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\PayrollProvider"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="PayrollProvider"
      DTS:DTSID="{D9E4B22E-567E-4874-AE29-281EC44DDC6B}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="PayrollProvider"
      DTS:ThreadHint="57">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*STEP 3: Migrate MyPlans data to PPC parent tables*/&#xA;/*PayrollProvider*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(MAX), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[PayrollProvider_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[PayrollProvider]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [PayrollProvider_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [PayrollProvider_Text]&#xA;   FROM [dbo].[PayrollProvider_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[PayrollProvider] T &#xA;              WHERE TRIM(T.PayrollProvider_Text) = TRIM(@LibName)) &#xA;BEGIN&#xA;    SET @NewID = (SELECT TOP 1 PayrollProvider_ID FROM [dbo].[PayrollProvider] T &#xA;              WHERE TRIM(T.PayrollProvider_Text) = TRIM(@LibName))&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;IF(@OldID = -1)&#xA;&#x9;BEGIN&#xA;&#x9;SET IDENTITY_INSERT dbo.[PayrollProvider] ON; &#xA;&#x9;INSERT INTO [dbo].[PayrollProvider](PayrollProvider_ID, PayrollProvider_Text) OUTPUT Inserted.PayrollProvider_ID INTO @IdentityValue&#xA;&#x9;&#x9;SELECT PayrollProvider_ID, PayrollProvider_Text&#xA;   &#x9;&#x9;FROM [dbo].[PayrollProvider_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET IDENTITY_INSERT dbo.[PayrollProvider] OFF;&#xA;&#x9;END&#xA;&#x9;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[PayrollProvider] OUTPUT Inserted.PayrollProvider_ID INTO @IdentityValue&#xA;&#x9;  SELECT [PayrollProvider_Text]&#xA;   &#x9;&#x9;FROM [dbo].[PayrollProvider_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;END&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA;&#x9;IF OBJECT_ID('dbo.PayrollProvider_ID_Mapping') IS NOT NULL&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[PayrollProvider_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)&#xA;&#x9;END&#xA; &#xA;   SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[PayrollProvider_MP]  WHERE LoopId &gt; @LoopCounter&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.[PayrollProvider] ON; &#xA;INSERT INTO [dbo].[PayrollProvider](PayrollProvider_ID, PayrollProvider_Text)&#xA;&#x9;SELECT PayrollProvider_ID, PayrollProvider_Text&#xA;   &#x9;FROM [dbo].[PayrollProvider_MP] &#xA;SET IDENTITY_INSERT dbo.PayrollProvider OFF;&#xA;END&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());    &#xA;END CATCH;  &#xA;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\PlanParticipantType_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="PlanParticipantType_Lib"
      DTS:DTSID="{95E7876B-8112-4D7E-9704-0AB149F5E508}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="PlanParticipantType_Lib"
      DTS:ThreadHint="58">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*PlanParticipantType_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[PlanParticipantType_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[PlanParticipantType_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [PlanParticipantType_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [PlanParticipantType_Lib_Text]&#xA;   FROM [dbo].[PlanParticipantType_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[PlanParticipantType_Lib] T &#xA;              WHERE T.PlanParticipantType_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT PlanParticipantType_Lib_ID FROM [dbo].[PlanParticipantType_Lib] T &#xA;              WHERE T.PlanParticipantType_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[PlanParticipantType_Lib] OUTPUT Inserted.PlanParticipantType_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT PlanParticipantType_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[PlanParticipantType_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.PlanParticipantType_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[PlanParticipantType_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[PlanParticipantType_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.PlanParticipantType_Lib ON; &#xA;INSERT INTO [dbo].[PlanParticipantType_Lib](PlanParticipantType_Lib_ID, PlanParticipantType_Lib_Text)&#xA;&#x9;SELECT PlanParticipantType_Lib_ID, PlanParticipantType_Lib_Text&#xA;   &#x9;FROM [dbo].[PlanParticipantType_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.PlanParticipantType_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;&#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;    &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Portal_DocMaintainedBy"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Portal_DocMaintainedBy"
      DTS:DTSID="{4F1C631B-0095-4A2B-90D8-F8D2FD1FE451}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Portal_DocMaintainedBy"
      DTS:ThreadHint="59">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="&#xA;/*Portal_DocMaintainedBy*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(MAX), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[Portal_DocMaintainedBy_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[Portal_DocMaintainedBy]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [DocMaintainedById],&#xA;&#x9;&#x9;&#x9;@LibName = [DocMaintainedByName]&#xA;   FROM [dbo].[Portal_DocMaintainedBy_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[Portal_DocMaintainedBy] T &#xA;              WHERE TRIM(T.[DocMaintainedByName]) = TRIM(@LibName)) &#xA;BEGIN&#xA;    SET @NewID = (SELECT TOP 1 [DocMaintainedById] FROM [dbo].[Portal_DocMaintainedBy] T &#xA;              WHERE TRIM(T.[DocMaintainedByName]) = TRIM(@LibName))&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;IF(@OldID = -1)&#xA;&#x9;BEGIN&#xA;&#x9;SET IDENTITY_INSERT dbo.[Portal_DocMaintainedBy] ON; &#xA;&#x9;INSERT INTO [dbo].[Portal_DocMaintainedBy]([DocMaintainedById], [DocMaintainedByName]) OUTPUT Inserted.[DocMaintainedById] INTO @IdentityValue&#xA;&#x9;&#x9;SELECT [DocMaintainedById], [DocMaintainedByName]&#xA;   &#x9;&#x9;FROM [dbo].[Portal_DocMaintainedBy_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET IDENTITY_INSERT dbo.[Portal_DocMaintainedBy] OFF;&#xA;&#x9;END&#xA;&#x9;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[Portal_DocMaintainedBy] OUTPUT Inserted.[DocMaintainedById] INTO @IdentityValue&#xA;&#x9;  SELECT [DocMaintainedByName]&#xA;   &#x9;&#x9;FROM [dbo].[Portal_DocMaintainedBy_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;END&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA;&#x9;IF OBJECT_ID('dbo.Portal_DocMaintainedBy_ID_Mapping') IS NOT NULL&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[Portal_DocMaintainedBy_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)&#xA;&#x9;END&#xA; &#xA;   SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[Portal_DocMaintainedBy_MP]  WHERE LoopId &gt; @LoopCounter&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.[Portal_DocMaintainedBy] ON; &#xA;INSERT INTO [dbo].[Portal_DocMaintainedBy]([DocMaintainedById], [DocMaintainedByName])&#xA;&#x9;SELECT [DocMaintainedById], [DocMaintainedByName]&#xA;   &#x9;FROM [dbo].[Portal_DocMaintainedBy_MP] &#xA;SET IDENTITY_INSERT dbo.PayrollProvider OFF;&#xA;END&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());    &#xA;END CATCH;  &#xA;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Portal_NewTPAFirm"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Portal_NewTPAFirm"
      DTS:DTSID="{E1A77ABA-2BD7-461F-BEE5-8104BE3D11EC}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Portal_NewTPAFirm"
      DTS:ThreadHint="60">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="&#xA;/*Portal_NewTPAFirm*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(MAX), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[Portal_NewTPAFirm_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[Portal_NewTPAFirm]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [Id],&#xA;&#x9;&#x9;&#x9;@LibName = TPAFirmText&#xA;   FROM [dbo].[Portal_NewTPAFirm_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[Portal_NewTPAFirm] T &#xA;              WHERE TRIM(T.TPAFirmText) = TRIM(@LibName)) &#xA;BEGIN&#xA;    SET @NewID = (SELECT TOP 1 Id FROM [dbo].[Portal_NewTPAFirm] T &#xA;              WHERE TRIM(T.TPAFirmText) = TRIM(@LibName))&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;IF(@OldID = -1)&#xA;&#x9;BEGIN&#xA;&#x9;SET IDENTITY_INSERT dbo.[Portal_NewTPAFirm] ON; &#xA;&#x9;INSERT INTO [dbo].[Portal_NewTPAFirm](Id, TPAFirmText) OUTPUT Inserted.Id INTO @IdentityValue&#xA;&#x9;&#x9;SELECT Id, TPAFirmText&#xA;   &#x9;&#x9;FROM [dbo].[Portal_NewTPAFirm_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET IDENTITY_INSERT dbo.[Portal_NewTPAFirm] OFF;&#xA;&#x9;END&#xA;&#x9;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[Portal_NewTPAFirm] OUTPUT Inserted.Id INTO @IdentityValue&#xA;&#x9;  SELECT TPAFirmText&#xA;   &#x9;&#x9;FROM [dbo].[Portal_NewTPAFirm_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;END&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA;&#x9;IF OBJECT_ID('dbo.Portal_NewTPAFirm_ID_Mapping') IS NOT NULL&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[Portal_NewTPAFirm_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)&#xA;&#x9;END&#xA; &#xA;   SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[Portal_NewTPAFirm_MP]  WHERE LoopId &gt; @LoopCounter&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.[Portal_NewTPAFirm] ON; &#xA;INSERT INTO [dbo].[Portal_NewTPAFirm](Id, TPAFirmText)&#xA;&#x9;SELECT Id, TPAFirmText&#xA;   &#x9;FROM [dbo].[Portal_NewTPAFirm_MP] &#xA;SET IDENTITY_INSERT dbo.[Portal_NewTPAFirm] OFF;&#xA;END&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());    &#xA;END CATCH;  &#xA;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Portal_ReasonForDeparture"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Portal_ReasonForDeparture"
      DTS:DTSID="{9E441E59-D16D-4682-B0C0-1F8048A5D702}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Portal_ReasonForDeparture"
      DTS:ThreadHint="61">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="&#xA;/*Portal_ReasonForDeparture*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(MAX), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[Portal_ReasonForDeparture_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[Portal_ReasonForDeparture]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [Id],&#xA;&#x9;&#x9;&#x9;@LibName = [ReasonForDepartureText]&#xA;   FROM [dbo].[Portal_ReasonForDeparture_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[Portal_ReasonForDeparture] T &#xA;              WHERE TRIM(T.ReasonForDepartureText) = TRIM(@LibName)) &#xA;BEGIN&#xA;    SET @NewID = (SELECT TOP 1 Id FROM [dbo].[Portal_ReasonForDeparture] T &#xA;              WHERE TRIM(T.ReasonForDepartureText) = TRIM(@LibName))&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;IF(@OldID = -1)&#xA;&#x9;BEGIN&#xA;&#x9;SET IDENTITY_INSERT dbo.[Portal_ReasonForDeparture] ON; &#xA;&#x9;INSERT INTO [dbo].[Portal_ReasonForDeparture](Id, ReasonForDepartureText) OUTPUT Inserted.Id INTO @IdentityValue&#xA;&#x9;&#x9;SELECT Id, ReasonForDepartureText&#xA;   &#x9;&#x9;FROM [dbo].[Portal_ReasonForDeparture_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET IDENTITY_INSERT dbo.[Portal_ReasonForDeparture] OFF;&#xA;&#x9;END&#xA;&#x9;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[Portal_ReasonForDeparture] OUTPUT Inserted.Id INTO @IdentityValue&#xA;&#x9;  SELECT [ReasonForDepartureText]&#xA;   &#x9;&#x9;FROM [dbo].[Portal_ReasonForDeparture_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;END&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA;&#x9;IF OBJECT_ID('dbo.Portal_ReasonForDeparture_ID_Mapping') IS NOT NULL&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[Portal_ReasonForDeparture_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)&#xA;&#x9;END&#xA; &#xA;   SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[Portal_ReasonForDeparture_MP]  WHERE LoopId &gt; @LoopCounter&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.[Portal_ReasonForDeparture] ON; &#xA;INSERT INTO [dbo].[Portal_ReasonForDeparture](Id, ReasonForDepartureText)&#xA;&#x9;SELECT Id, ReasonForDepartureText&#xA;   &#x9;FROM [dbo].[Portal_ReasonForDeparture_MP] &#xA;SET IDENTITY_INSERT dbo.Portal_ReasonForDeparture OFF;&#xA;END&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());    &#xA;END CATCH;  &#xA;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Portal_TakeOverFrom"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Portal_TakeOverFrom"
      DTS:DTSID="{1106FAE1-3505-49D7-8421-C525CC6A76EB}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Portal_TakeOverFrom"
      DTS:ThreadHint="90">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="&#xA;/*Portal_TakeOverFrom*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(MAX), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[Portal_TakeOverFrom_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[Portal_TakeOverFrom]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [Id],&#xA;&#x9;&#x9;&#x9;@LibName = [TakeOverFromText]&#xA;   FROM [dbo].[Portal_TakeOverFrom_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[Portal_TakeOverFrom] T &#xA;              WHERE TRIM(T.TakeOverFromText) = TRIM(@LibName)) &#xA;BEGIN&#xA;    SET @NewID = (SELECT TOP 1 Id FROM [dbo].[Portal_TakeOverFrom] T &#xA;              WHERE TRIM(T.TakeOverFromText) = TRIM(@LibName))&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;IF(@OldID = -1)&#xA;&#x9;BEGIN&#xA;&#x9;SET IDENTITY_INSERT dbo.[Portal_TakeOverFrom] ON; &#xA;&#x9;INSERT INTO [dbo].[Portal_TakeOverFrom](Id, TakeOverFromText) OUTPUT Inserted.Id INTO @IdentityValue&#xA;&#x9;&#x9;SELECT Id, TakeOverFromText&#xA;   &#x9;&#x9;FROM [dbo].[Portal_TakeOverFrom_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET IDENTITY_INSERT dbo.[Portal_TakeOverFrom] OFF;&#xA;&#x9;END&#xA;&#x9;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[Portal_TakeOverFrom] OUTPUT Inserted.Id INTO @IdentityValue&#xA;&#x9;  SELECT [TakeOverFromText]&#xA;   &#x9;&#x9;FROM [dbo].[Portal_TakeOverFrom_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;END&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA;&#x9;IF OBJECT_ID('dbo.Portal_TakeOverFrom_ID_Mapping') IS NOT NULL&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[Portal_TakeOverFrom_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)&#xA;&#x9;END&#xA; &#xA;   SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[Portal_TakeOverFrom_MP]  WHERE LoopId &gt; @LoopCounter&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.[Portal_TakeOverFrom] ON; &#xA;INSERT INTO [dbo].[Portal_TakeOverFrom](Id, TakeOverFromText)&#xA;&#x9;SELECT Id, TakeOverFromText&#xA;   &#x9;FROM [dbo].[Portal_TakeOverFrom_MP] &#xA;SET IDENTITY_INSERT dbo.PayrollProvider OFF;&#xA;END&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());    &#xA;END CATCH;  &#xA;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\PricingGroupsLib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="PricingGroupsLib"
      DTS:DTSID="{D527FA96-FA67-4747-8507-5AD25424AD08}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="PricingGroupsLib"
      DTS:ThreadHint="91">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*PricingGroupsLib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[PricingGroupsLib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[PricingGroupsLib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [PricingGroupsLib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [PricingGroupsLib_Text]&#xA;   FROM [dbo].[PricingGroupsLib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[PricingGroupsLib] T &#xA;              WHERE T.PricingGroupsLib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT PricingGroupsLib_ID FROM [dbo].[PricingGroupsLib] T &#xA;              WHERE T.PricingGroupsLib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[PricingGroupsLib] OUTPUT Inserted.PricingGroupsLib_ID INTO @IdentityValue&#xA;&#x9;  SELECT PricingGroupsLib_Text, EffectiveYear&#xA;   &#x9;&#x9;FROM [dbo].[PricingGroupsLib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.PricingGroupsLib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[PricingGroupsLib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[PricingGroupsLib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.PricingGroupsLib ON; &#xA;INSERT INTO [dbo].[PricingGroupsLib](PricingGroupsLib_ID, PricingGroupsLib_Text, EffectiveYear)&#xA;&#x9;SELECT PricingGroupsLib_ID, PricingGroupsLib_Text, EffectiveYear&#xA;   &#x9;FROM [dbo].[PricingGroupsLib_MP] &#xA;SET IDENTITY_INSERT dbo.PricingGroupsLib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\PricingPlanRestrictions"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="PricingPlanRestrictions"
      DTS:DTSID="{2DAB0315-0FDC-4643-8D85-669AABFD3754}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="PricingPlanRestrictions"
      DTS:ThreadHint="92">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*PricingPlanRestrictions*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[PricingPlanRestrictions_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[PricingPlanRestrictions]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [PricingPlanRestrictions_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [PricingPlanName]&#xA;   FROM [dbo].[PricingPlanRestrictions_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[PricingPlanRestrictions] T &#xA;              WHERE T.[PricingPlanName] = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT PricingPlanRestrictions_ID FROM [dbo].[PricingPlanRestrictions] T &#xA;              WHERE T.[PricingPlanName] = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[PricingPlanRestrictions] OUTPUT Inserted.PricingPlanRestrictions_ID INTO @IdentityValue&#xA;&#x9;  SELECT [PricingPlanName]&#xA;   &#x9;&#x9;FROM [dbo].[PricingPlanRestrictions_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.PricingPlanRestrictions_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[PricingPlanRestrictions_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[PricingPlanRestrictions_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.PricingPlanRestrictions ON; &#xA;INSERT INTO [dbo].[PricingPlanRestrictions](PricingPlanRestrictions_ID, [PricingPlanName])&#xA;&#x9;SELECT PricingPlanRestrictions_ID, [PricingPlanName]&#xA;   &#x9;FROM [dbo].[PricingPlanRestrictions_MP] &#xA;SET IDENTITY_INSERT dbo.PricingPlanRestrictions OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\PricingScriptRestrictions"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="PricingScriptRestrictions"
      DTS:DTSID="{D2F930EF-BBA3-4EFB-85A6-CF7A4F453E83}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="PricingScriptRestrictions"
      DTS:ThreadHint="93">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*PricingScriptRestrictions*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[PricingScriptRestrictions_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[PricingScriptRestrictions]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [PricingScriptRestrictions_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [PricingScript]&#xA;   FROM [dbo].[PricingScriptRestrictions_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[PricingScriptRestrictions] T &#xA;              WHERE T.PricingScript = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT PricingScriptRestrictions_ID FROM [dbo].[PricingScriptRestrictions] T &#xA;              WHERE T.PricingScript = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[PricingScriptRestrictions] OUTPUT Inserted.PricingScriptRestrictions_ID INTO @IdentityValue&#xA;&#x9;  SELECT PricingScript, ExclusionHash&#xA;   &#x9;&#x9;FROM [dbo].[PricingScriptRestrictions_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.PricingScriptRestrictions_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[PricingScriptRestrictions_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[PricingScriptRestrictions_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.PricingScriptRestrictions ON; &#xA;INSERT INTO [dbo].[PricingScriptRestrictions](PricingScriptRestrictions_ID, PricingScript, ExclusionHash)&#xA;&#x9;SELECT PricingScriptRestrictions_ID, PricingScript, ExclusionHash&#xA;   &#x9;FROM [dbo].[PricingScriptRestrictions_MP] &#xA;SET IDENTITY_INSERT dbo.PricingScriptRestrictions OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\PricingUnitOfMeasure"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="PricingUnitOfMeasure"
      DTS:DTSID="{F7613112-CB7C-4112-9C05-B13134A9E19F}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="PricingUnitOfMeasure"
      DTS:ThreadHint="94">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*PricingUnitOfMeasure*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[PricingUnitOfMeasure_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[PricingUnitOfMeasure]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [PricingUnitOfMeasure_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [PricingUnitOfMeasure_Text]&#xA;   FROM [dbo].[PricingUnitOfMeasure_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[PricingUnitOfMeasure] T &#xA;              WHERE T.PricingUnitOfMeasure_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT PricingUnitOfMeasure_ID FROM [dbo].[PricingUnitOfMeasure] T &#xA;              WHERE T.PricingUnitOfMeasure_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[PricingUnitOfMeasure] OUTPUT Inserted.PricingUnitOfMeasure_ID INTO @IdentityValue&#xA;&#x9;  SELECT PricingUnitOfMeasure_Text&#xA;   &#x9;&#x9;FROM [dbo].[PricingUnitOfMeasure_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.PricingUnitOfMeasure_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[PricingUnitOfMeasure_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[PricingUnitOfMeasure_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.PricingUnitOfMeasure ON; &#xA;INSERT INTO [dbo].[PricingUnitOfMeasure](PricingUnitOfMeasure_ID, PricingUnitOfMeasure_Text)&#xA;&#x9;SELECT PricingUnitOfMeasure_ID, PricingUnitOfMeasure_Text&#xA;   &#x9;FROM [dbo].[PricingUnitOfMeasure_MP] &#xA;SET IDENTITY_INSERT dbo.PricingUnitOfMeasure OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\ProfitSharingAllocationType"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="ProfitSharingAllocationType"
      DTS:DTSID="{2BAFB672-D52F-4D15-9E3E-0E75132E2BE3}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="ProfitSharingAllocationType"
      DTS:ThreadHint="95">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*ProfitSharingAllocationType*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[ProfitSharingAllocationType_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[ProfitSharingAllocationType]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [ProfitSharingAllocationType_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [ProfitSharingAllocationType_Text]&#xA;   FROM [dbo].[ProfitSharingAllocationType_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[ProfitSharingAllocationType] T &#xA;              WHERE T.ProfitSharingAllocationType_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT ProfitSharingAllocationType_ID FROM [dbo].[ProfitSharingAllocationType] T &#xA;              WHERE T.ProfitSharingAllocationType_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[ProfitSharingAllocationType] OUTPUT Inserted.ProfitSharingAllocationType_ID INTO @IdentityValue&#xA;&#x9;  SELECT ProfitSharingAllocationType_Text&#xA;   &#x9;&#x9;FROM [dbo].[ProfitSharingAllocationType_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.ProfitSharingAllocationType_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[ProfitSharingAllocationType_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[ProfitSharingAllocationType_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.ProfitSharingAllocationType ON; &#xA;INSERT INTO [dbo].[ProfitSharingAllocationType](ProfitSharingAllocationType_ID, ProfitSharingAllocationType_Text)&#xA;&#x9;SELECT ProfitSharingAllocationType_ID, ProfitSharingAllocationType_Text&#xA;   &#x9;FROM [dbo].[ProfitSharingAllocationType_MP] &#xA;SET IDENTITY_INSERT dbo.ProfitSharingAllocationType OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\ProfitSharingClasses"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="ProfitSharingClasses"
      DTS:DTSID="{2C3D35CA-1154-49F8-A983-1E2EB86684A2}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="ProfitSharingClasses"
      DTS:ThreadHint="96">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*ProfitSharingClasses*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[ProfitSharingClasses_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[ProfitSharingClasses]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [ProfitSharingClasses_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [ProfitSharingClasses_Text]&#xA;   FROM [dbo].[ProfitSharingClasses_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[ProfitSharingClasses] T &#xA;              WHERE T.ProfitSharingClasses_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT ProfitSharingClasses_ID FROM [dbo].[ProfitSharingClasses] T &#xA;              WHERE T.ProfitSharingClasses_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[ProfitSharingClasses] OUTPUT Inserted.ProfitSharingClasses_ID INTO @IdentityValue&#xA;&#x9;  SELECT ProfitSharingClasses_Text&#xA;   &#x9;&#x9;FROM [dbo].[ProfitSharingClasses_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.ProfitSharingClasses_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[ProfitSharingClasses_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[ProfitSharingClasses_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.ProfitSharingClasses ON; &#xA;INSERT INTO [dbo].[ProfitSharingClasses](ProfitSharingClasses_ID, ProfitSharingClasses_Text)&#xA;&#x9;SELECT ProfitSharingClasses_ID, ProfitSharingClasses_Text&#xA;   &#x9;FROM [dbo].[ProfitSharingClasses_MP] &#xA;SET IDENTITY_INSERT dbo.ProfitSharingClasses OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH&#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;   &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\PurposeOfLoan_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="PurposeOfLoan_Lib"
      DTS:DTSID="{4D3B6F58-209A-4DFA-BD51-E98C37B010D5}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="PurposeOfLoan_Lib"
      DTS:ThreadHint="97">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*PurposeOfLoan_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[PurposeOfLoan_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[PurposeOfLoan_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [PurposeOfLoan_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [PurposeOfLoan_Lib_Text]&#xA;   FROM [dbo].[PurposeOfLoan_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[PurposeOfLoan_Lib] T &#xA;              WHERE T.PurposeOfLoan_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT PurposeOfLoan_Lib_ID FROM [dbo].[PurposeOfLoan_Lib] T &#xA;              WHERE T.PurposeOfLoan_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[PurposeOfLoan_Lib] OUTPUT Inserted.PurposeOfLoan_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT PurposeOfLoan_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[PurposeOfLoan_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.PurposeOfLoan_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[PurposeOfLoan_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[PurposeOfLoan_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.PurposeOfLoan_Lib ON; &#xA;INSERT INTO [dbo].[PurposeOfLoan_Lib](PurposeOfLoan_Lib_ID, PurposeOfLoan_Lib_Text)&#xA;&#x9;SELECT PurposeOfLoan_Lib_ID, PurposeOfLoan_Lib_Text&#xA;   &#x9;FROM [dbo].[PurposeOfLoan_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.PurposeOfLoan_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Questionnaire_Group"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Questionnaire_Group"
      DTS:DTSID="{AED3217F-E600-4245-AB81-79A70A096184}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Questionnaire_Group"
      DTS:ThreadHint="79">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*Questionnaire_Group*/&#xA;BEGIN TRANSACTION;&#xA;&#xA;BEGIN TRY  &#xA;&#xA;--UPDATE ByWho column&#xA;UPDATE [dbo].[Questionnaire_Group_MP]&#xA;SET [ByWho] = um.[PPC_SysUserID]&#xA;FROM [dbo].[Questionnaire_Group_MP] bc&#xA;JOIN [dbo].[UserID_Mapping] um ON bc.ByWho=um.[MyPlans_SysUserID]&#xA;WHERE bc.ByWho != -1&#xA;&#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;    @MaxId = MAX(LoopId)&#xA;FROM [dbo].[Questionnaire_Group_MP]&#xA;&#xA;IF ((SELECT COUNT(*)&#xA;FROM [dbo].[Questionnaire_Group]) &gt; 0)&#xA;BEGIN&#xA;    WHILE ( @LoopCounter IS NOT NULL&#xA;        AND @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;        SELECT @OldID = [Questionnaire_Group_ID],&#xA;            @LibName = [Questionnaire_Group_Text]&#xA;        FROM [dbo].[Questionnaire_Group_MP]&#xA;        WHERE LoopId = @LoopCounter&#xA;        PRINT @LibName&#xA;&#xA;&#xA;        IF EXISTS(SELECT 1&#xA;        FROM [dbo].[Questionnaire_Group] T&#xA;        WHERE T.Questionnaire_Group_Text = @LibName) &#xA;BEGIN&#xA;            SET @NewID = (SELECT Questionnaire_Group_ID&#xA;            FROM [dbo].[Questionnaire_Group] T&#xA;            WHERE T.Questionnaire_Group_Text = @LibName)&#xA;        END&#xA;ELSE&#xA;BEGIN&#xA;            INSERT INTO [dbo].[Questionnaire_Group]&#xA;            OUTPUT Inserted.Questionnaire_Group_ID INTO @IdentityValue&#xA;            SELECT &#xA;Questionnaire_Group_Text,&#xA;Plan_Year,&#xA;LastTouched,&#xA;ByWho&#xA;            FROM [dbo].[Questionnaire_Group_MP]&#xA;            WHERE LoopId = @LoopCounter&#xA;            SET @NewID = (SELECT TOP 1&#xA;                ID&#xA;            FROM @IdentityValue);&#xA;            PRINT 'Data inserted'&#xA;            DELETE FROM @IdentityValue;&#xA;        END&#xA;&#xA;        IF OBJECT_ID('dbo.Questionnaire_Group_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;            INSERT INTO [dbo].[Questionnaire_Group_ID_Mapping]&#xA;            VALUES(@OldID, @NewID)&#xA;        END&#xA;&#xA;        SELECT @LoopCounter  = MIN(LoopId)&#xA;        FROM [dbo].[Questionnaire_Group_MP]&#xA;        WHERE LoopId &gt; @LoopCounter&#xA;&#xA;    END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;    SET IDENTITY_INSERT dbo.Questionnaire_Group ON;&#xA;    INSERT INTO [dbo].[Questionnaire_Group]&#xA;        (Questionnaire_Group_ID,&#xA;&#x9;&#x9;Questionnaire_Group_Text,&#xA;Plan_Year,&#xA;LastTouched,&#xA;ByWho)&#xA;    SELECT Questionnaire_Group_ID,&#xA;&#x9;Questionnaire_Group_Text,&#xA;Plan_Year,&#xA;LastTouched,&#xA;ByWho&#xA;    FROM [dbo].[Questionnaire_Group_MP]&#xA;    SET IDENTITY_INSERT dbo.Questionnaire_Group OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;VALUES&#xA;    (SUSER_SNAME(),&#xA;        ERROR_NUMBER(),&#xA;        ERROR_STATE(),&#xA;        ERROR_SEVERITY(),&#xA;        ERROR_LINE(),&#xA;        ERROR_PROCEDURE(),&#xA;        ERROR_MESSAGE(),&#xA;        GETDATE());  &#xA;  &#xA;END CATCH;&#xA;&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\ReasonForDistribution_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="ReasonForDistribution_Lib"
      DTS:DTSID="{34C40B29-8ADC-49AD-86EA-A4DE228710D1}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="ReasonForDistribution_Lib"
      DTS:ThreadHint="80">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*ReasonForDistribution_Lib*/&#xA;BEGIN TRANSACTION;&#xA;&#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;    @MaxId = MAX(LoopId)&#xA;FROM [dbo].[ReasonForDistribution_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*)&#xA;FROM [dbo].[ReasonForDistribution_Lib]) &gt; 0)&#xA;BEGIN&#xA;    WHILE ( @LoopCounter IS NOT NULL&#xA;        AND @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;        SELECT @OldID = [ReasonForDistribution_Lib_ID],&#xA;            @LibName = [ReasonForDistribution_Lib_Text]&#xA;        FROM [dbo].[ReasonForDistribution_Lib_MP]&#xA;        WHERE LoopId = @LoopCounter&#xA;        PRINT @LibName&#xA;&#xA;&#xA;        IF EXISTS(SELECT 1&#xA;        FROM [dbo].[ReasonForDistribution_Lib] T&#xA;        WHERE T.ReasonForDistribution_Lib_Text = @LibName) &#xA;BEGIN&#xA;            SET @NewID = (SELECT ReasonForDistribution_Lib_ID&#xA;            FROM [dbo].[ReasonForDistribution_Lib] T&#xA;            WHERE T.ReasonForDistribution_Lib_Text = @LibName)&#xA;        END&#xA;ELSE&#xA;BEGIN&#xA;            INSERT INTO [dbo].[ReasonForDistribution_Lib]&#xA;            OUTPUT Inserted.ReasonForDistribution_Lib_ID INTO @IdentityValue&#xA;            SELECT ReasonForDistribution_Lib_Text&#xA;            FROM [dbo].[ReasonForDistribution_Lib_MP]&#xA;            WHERE LoopId = @LoopCounter&#xA;            SET @NewID = (SELECT TOP 1&#xA;                ID&#xA;            FROM @IdentityValue);&#xA;            PRINT 'Data inserted'&#xA;            DELETE FROM @IdentityValue;&#xA;        END&#xA;&#xA;        IF OBJECT_ID('dbo.ReasonForDistribution_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;            INSERT INTO [dbo].[ReasonForDistribution_Lib_ID_Mapping]&#xA;            VALUES(@OldID, @NewID)&#xA;        END&#xA;&#xA;        SELECT @LoopCounter  = MIN(LoopId)&#xA;        FROM [dbo].[ReasonForDistribution_Lib_MP]&#xA;        WHERE LoopId &gt; @LoopCounter&#xA;&#xA;    END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;    SET IDENTITY_INSERT dbo.ReasonForDistribution_Lib ON;&#xA;    INSERT INTO [dbo].[ReasonForDistribution_Lib]&#xA;        (ReasonForDistribution_Lib_ID, ReasonForDistribution_Lib_Text)&#xA;    SELECT ReasonForDistribution_Lib_ID, ReasonForDistribution_Lib_Text&#xA;    FROM [dbo].[ReasonForDistribution_Lib_MP]&#xA;    SET IDENTITY_INSERT dbo.ReasonForDistribution_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;VALUES&#xA;    (SUSER_SNAME(),&#xA;        ERROR_NUMBER(),&#xA;        ERROR_STATE(),&#xA;        ERROR_SEVERITY(),&#xA;        ERROR_LINE(),&#xA;        ERROR_PROCEDURE(),&#xA;        ERROR_MESSAGE(),&#xA;        GETDATE());  &#xA;   &#xA;END CATCH;&#xA;&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\RecordKeeper_Type"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="RecordKeeper_Type"
      DTS:DTSID="{52F53F91-D306-43F4-A07D-8445ED429F32}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="RecordKeeper_Type"
      DTS:ThreadHint="81">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*RecordKeeper_Type*/&#xA;BEGIN TRANSACTION;&#xA;&#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;    @MaxId = MAX(LoopId)&#xA;FROM [dbo].[RecordKeeper_Type_MP]&#xA;&#xA;IF ((SELECT COUNT(*)&#xA;FROM [dbo].[RecordKeeper_Type]) &gt; 0)&#xA;BEGIN&#xA;    WHILE ( @LoopCounter IS NOT NULL&#xA;        AND @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;        SELECT @OldID = [RecordKeeper_Type_ID],&#xA;            @LibName = [RecordKeeper_Type_Text]&#xA;        FROM [dbo].[RecordKeeper_Type_MP]&#xA;        WHERE LoopId = @LoopCounter&#xA;        PRINT @LibName&#xA;&#xA;&#xA;        IF EXISTS(SELECT 1&#xA;        FROM [dbo].[RecordKeeper_Type] T&#xA;        WHERE T.RecordKeeper_Type_Text = @LibName) &#xA;BEGIN&#xA;            SET @NewID = (SELECT RecordKeeper_Type_ID&#xA;            FROM [dbo].[RecordKeeper_Type] T&#xA;            WHERE T.RecordKeeper_Type_Text = @LibName)&#xA;        END&#xA;ELSE&#xA;BEGIN&#xA;            INSERT INTO [dbo].[RecordKeeper_Type]&#xA;            OUTPUT Inserted.RecordKeeper_Type_ID INTO @IdentityValue&#xA;            SELECT RecordKeeper_Type_Text&#xA;            FROM [dbo].[RecordKeeper_Type_MP]&#xA;            WHERE LoopId = @LoopCounter&#xA;            SET @NewID = (SELECT TOP 1&#xA;                ID&#xA;            FROM @IdentityValue);&#xA;            PRINT 'Data inserted'&#xA;            DELETE FROM @IdentityValue;&#xA;        END&#xA;&#xA;        IF OBJECT_ID('dbo.RecordKeeper_Type_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;            INSERT INTO [dbo].[RecordKeeper_Type_ID_Mapping]&#xA;            VALUES(@OldID, @NewID)&#xA;        END&#xA;&#xA;        SELECT @LoopCounter  = MIN(LoopId)&#xA;        FROM [dbo].[RecordKeeper_Type_MP]&#xA;        WHERE LoopId &gt; @LoopCounter&#xA;&#xA;    END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;    SET IDENTITY_INSERT dbo.RecordKeeper_Type ON;&#xA;    INSERT INTO [dbo].[RecordKeeper_Type]&#xA;        (RecordKeeper_Type_ID, RecordKeeper_Type_Text)&#xA;    SELECT RecordKeeper_Type_ID, RecordKeeper_Type_Text&#xA;    FROM [dbo].[RecordKeeper_Type_MP]&#xA;    SET IDENTITY_INSERT dbo.RecordKeeper_Type OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;VALUES&#xA;    (SUSER_SNAME(),&#xA;        ERROR_NUMBER(),&#xA;        ERROR_STATE(),&#xA;        ERROR_SEVERITY(),&#xA;        ERROR_LINE(),&#xA;        ERROR_PROCEDURE(),&#xA;        ERROR_MESSAGE(),&#xA;        GETDATE());  &#xA;   &#xA;END CATCH;&#xA;&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\RefinanceFee_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="RefinanceFee_Lib"
      DTS:DTSID="{A452B54B-2F70-4ABD-91C5-9B71F55DE9B8}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="RefinanceFee_Lib"
      DTS:ThreadHint="82">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*RefinanceFee_Lib*/&#xA;BEGIN TRANSACTION;&#xA;&#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;    @MaxId = MAX(LoopId)&#xA;FROM [dbo].[RefinanceFee_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*)&#xA;FROM [dbo].[RefinanceFee_Lib]) &gt; 0)&#xA;BEGIN&#xA;    WHILE ( @LoopCounter IS NOT NULL&#xA;        AND @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;        SELECT @OldID = [RefinanceFee_Lib_ID],&#xA;            @LibName = [RefinanceFee_Lib_Text]&#xA;        FROM [dbo].[RefinanceFee_Lib_MP]&#xA;        WHERE LoopId = @LoopCounter&#xA;        PRINT @LibName&#xA;&#xA;&#xA;        IF EXISTS(SELECT 1&#xA;        FROM [dbo].[RefinanceFee_Lib] T&#xA;        WHERE T.RefinanceFee_Lib_Text = @LibName) &#xA;BEGIN&#xA;            SET @NewID = (SELECT RefinanceFee_Lib_ID&#xA;            FROM [dbo].[RefinanceFee_Lib] T&#xA;            WHERE T.RefinanceFee_Lib_Text = @LibName)&#xA;        END&#xA;ELSE&#xA;BEGIN&#xA;            INSERT INTO [dbo].[RefinanceFee_Lib]&#xA;            OUTPUT Inserted.RefinanceFee_Lib_ID INTO @IdentityValue&#xA;            SELECT RefinanceFee_Lib_Text&#xA;            FROM [dbo].[RefinanceFee_Lib_MP]&#xA;            WHERE LoopId = @LoopCounter&#xA;            SET @NewID = (SELECT TOP 1&#xA;                ID&#xA;            FROM @IdentityValue);&#xA;            PRINT 'Data inserted'&#xA;            DELETE FROM @IdentityValue;&#xA;        END&#xA;&#xA;        IF OBJECT_ID('dbo.RefinanceFee_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;            INSERT INTO [dbo].[RefinanceFee_Lib_ID_Mapping]&#xA;            VALUES(@OldID, @NewID)&#xA;        END&#xA;&#xA;        SELECT @LoopCounter  = MIN(LoopId)&#xA;        FROM [dbo].[RefinanceFee_Lib_MP]&#xA;        WHERE LoopId &gt; @LoopCounter&#xA;&#xA;    END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;    SET IDENTITY_INSERT dbo.RefinanceFee_Lib ON;&#xA;    INSERT INTO [dbo].[RefinanceFee_Lib]&#xA;        (RefinanceFee_Lib_ID, RefinanceFee_Lib_Text)&#xA;    SELECT RefinanceFee_Lib_ID, RefinanceFee_Lib_Text&#xA;    FROM [dbo].[RefinanceFee_Lib_MP]&#xA;    SET IDENTITY_INSERT dbo.RefinanceFee_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;VALUES&#xA;    (SUSER_SNAME(),&#xA;        ERROR_NUMBER(),&#xA;        ERROR_STATE(),&#xA;        ERROR_SEVERITY(),&#xA;        ERROR_LINE(),&#xA;        ERROR_PROCEDURE(),&#xA;        ERROR_MESSAGE(),&#xA;        GETDATE());  &#xA;   &#xA;END CATCH;&#xA;&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Refund_Type_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Refund_Type_Lib"
      DTS:DTSID="{544A30C7-897C-4856-8DBD-8E3F5417CEB8}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Refund_Type_Lib"
      DTS:ThreadHint="83">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*Refund_Type_Lib*/&#xA;BEGIN TRANSACTION;&#xA;&#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;    @MaxId = MAX(LoopId)&#xA;FROM [dbo].[Refund_Type_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*)&#xA;FROM [dbo].[Refund_Type_Lib]) &gt; 0)&#xA;BEGIN&#xA;    WHILE ( @LoopCounter IS NOT NULL&#xA;        AND @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;        SELECT @OldID = [Refund_Type_Lib_ID],&#xA;            @LibName = [Refund_Type_Lib_Text]&#xA;        FROM [dbo].[Refund_Type_Lib_MP]&#xA;        WHERE LoopId = @LoopCounter&#xA;        PRINT @LibName&#xA;&#xA;&#xA;        IF EXISTS(SELECT 1&#xA;        FROM [dbo].[Refund_Type_Lib] T&#xA;        WHERE T.Refund_Type_Lib_Text = @LibName) &#xA;BEGIN&#xA;            SET @NewID = (SELECT Refund_Type_Lib_ID&#xA;            FROM [dbo].[Refund_Type_Lib] T&#xA;            WHERE T.Refund_Type_Lib_Text = @LibName)&#xA;        END&#xA;ELSE&#xA;BEGIN&#xA;            INSERT INTO [dbo].[Refund_Type_Lib]&#xA;            OUTPUT Inserted.Refund_Type_Lib_ID INTO @IdentityValue&#xA;            SELECT Refund_Type_Lib_Text&#xA;            FROM [dbo].[Refund_Type_Lib_MP]&#xA;            WHERE LoopId = @LoopCounter&#xA;            SET @NewID = (SELECT TOP 1&#xA;                ID&#xA;            FROM @IdentityValue);&#xA;            PRINT 'Data inserted'&#xA;            DELETE FROM @IdentityValue;&#xA;        END&#xA;&#xA;        IF OBJECT_ID('dbo.Refund_Type_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;            INSERT INTO [dbo].[Refund_Type_Lib_ID_Mapping]&#xA;            VALUES(@OldID, @NewID)&#xA;        END&#xA;&#xA;        SELECT @LoopCounter  = MIN(LoopId)&#xA;        FROM [dbo].[Refund_Type_Lib_MP]&#xA;        WHERE LoopId &gt; @LoopCounter&#xA;&#xA;    END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;    SET IDENTITY_INSERT dbo.Refund_Type_Lib ON;&#xA;    INSERT INTO [dbo].[Refund_Type_Lib]&#xA;        (Refund_Type_Lib_ID, Refund_Type_Lib_Text)&#xA;    SELECT Refund_Type_Lib_ID, Refund_Type_Lib_Text&#xA;    FROM [dbo].[Refund_Type_Lib_MP]&#xA;    SET IDENTITY_INSERT dbo.Refund_Type_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;VALUES&#xA;    (SUSER_SNAME(),&#xA;        ERROR_NUMBER(),&#xA;        ERROR_STATE(),&#xA;        ERROR_SEVERITY(),&#xA;        ERROR_LINE(),&#xA;        ERROR_PROCEDURE(),&#xA;        ERROR_MESSAGE(),&#xA;        GETDATE());  &#xA;  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;END CATCH;&#xA;&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\ServiceSchedule_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="ServiceSchedule_Lib"
      DTS:DTSID="{431F2BA0-00B5-4BAE-BBA7-47C2B59A7EB9}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="ServiceSchedule_Lib"
      DTS:ThreadHint="68">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*ServiceSchedule_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[ServiceSchedule_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[ServiceSchedule_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [ServiceSchedule_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [ServiceSchedule_Lib_Text]&#xA;   FROM [dbo].[ServiceSchedule_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[ServiceSchedule_Lib] T &#xA;              WHERE T.ServiceSchedule_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT ServiceSchedule_Lib_ID FROM [dbo].[ServiceSchedule_Lib] T &#xA;              WHERE T.ServiceSchedule_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[ServiceSchedule_Lib] OUTPUT Inserted.ServiceSchedule_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT ServiceSchedule_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[ServiceSchedule_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.ServiceSchedule_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[ServiceSchedule_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[ServiceSchedule_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.ServiceSchedule_Lib ON; &#xA;INSERT INTO [dbo].[ServiceSchedule_Lib](ServiceSchedule_Lib_ID, ServiceSchedule_Lib_Text)&#xA;&#x9;SELECT ServiceSchedule_Lib_ID, ServiceSchedule_Lib_Text&#xA;   &#x9;FROM [dbo].[ServiceSchedule_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.ServiceSchedule_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\ServiceUM_Type"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="ServiceUM_Type"
      DTS:DTSID="{2175F58D-2749-4AF5-B02B-1458595B92A1}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="ServiceUM_Type"
      DTS:ThreadHint="69">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*ServiceUM_Type*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[ServiceUM_Type_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[ServiceUM_Type]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [ServiceUM_Type],&#xA;&#x9;&#x9;&#x9;@LibName = [ServiceUM_Text]&#xA;   FROM [dbo].[ServiceUM_Type_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[ServiceUM_Type] T &#xA;              WHERE T.ServiceUM_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT ServiceUM_Type FROM [dbo].[ServiceUM_Type] T &#xA;              WHERE T.ServiceUM_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[ServiceUM_Type] OUTPUT Inserted.ServiceUM_Type INTO @IdentityValue&#xA;&#x9;  SELECT ServiceUM_Text&#xA;   &#x9;&#x9;FROM [dbo].[ServiceUM_Type_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.ServiceUM_Type_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[ServiceUM_Type_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[ServiceUM_Type_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.ServiceUM_Type ON; &#xA;INSERT INTO [dbo].[ServiceUM_Type](ServiceUM_Type, ServiceUM_Text)&#xA;&#x9;SELECT ServiceUM_Type, ServiceUM_Text&#xA;   &#x9;FROM [dbo].[ServiceUM_Type_MP] &#xA;SET IDENTITY_INSERT dbo.ServiceUM_Type OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\SourceHierarchy_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="SourceHierarchy_Lib"
      DTS:DTSID="{76F68D76-6B54-45A2-8724-1610E4F304C0}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="SourceHierarchy_Lib"
      DTS:ThreadHint="70">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*SourceHierarchy_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[SourceHierarchy_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[SourceHierarchy_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [SourceHierarchy_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [SourceHierarchy_Lib_Text]&#xA;   FROM [dbo].[SourceHierarchy_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[SourceHierarchy_Lib] T &#xA;              WHERE T.SourceHierarchy_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT SourceHierarchy_Lib_ID FROM [dbo].[SourceHierarchy_Lib] T &#xA;              WHERE T.SourceHierarchy_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[SourceHierarchy_Lib] OUTPUT Inserted.SourceHierarchy_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT SourceHierarchy_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[SourceHierarchy_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.SourceHierarchy_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[SourceHierarchy_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[SourceHierarchy_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.SourceHierarchy_Lib ON; &#xA;INSERT INTO [dbo].[SourceHierarchy_Lib](SourceHierarchy_Lib_ID, SourceHierarchy_Lib_Text)&#xA;&#x9;SELECT SourceHierarchy_Lib_ID, SourceHierarchy_Lib_Text&#xA;   &#x9;FROM [dbo].[SourceHierarchy_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.SourceHierarchy_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\SourcesAvailable_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="SourcesAvailable_Lib"
      DTS:DTSID="{3B21F60A-CE1A-4099-AC31-446199A7AEF5}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="SourcesAvailable_Lib"
      DTS:ThreadHint="71">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*SourcesAvailable_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[SourcesAvailable_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[SourcesAvailable_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [SourcesAvailable_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [SourcesAvailable_Lib_Text]&#xA;   FROM [dbo].[SourcesAvailable_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[SourcesAvailable_Lib] T &#xA;              WHERE T.SourcesAvailable_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT SourcesAvailable_Lib_ID FROM [dbo].[SourcesAvailable_Lib] T &#xA;              WHERE T.SourcesAvailable_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[SourcesAvailable_Lib] OUTPUT Inserted.SourcesAvailable_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT SourcesAvailable_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[SourcesAvailable_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.SourcesAvailable_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[SourcesAvailable_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[SourcesAvailable_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.SourcesAvailable_Lib ON; &#xA;INSERT INTO [dbo].[SourcesAvailable_Lib](SourcesAvailable_Lib_ID, SourcesAvailable_Lib_Text)&#xA;&#x9;SELECT SourcesAvailable_Lib_ID, SourcesAvailable_Lib_Text&#xA;   &#x9;FROM [dbo].[SourcesAvailable_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.SourcesAvailable_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\TaskList_Categories"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="TaskList_Categories"
      DTS:DTSID="{02D74C9A-4E15-4223-9E7D-4F4A1876F40B}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="TaskList_Categories"
      DTS:ThreadHint="72">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*TaskList_Categories*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[TaskList_Categories_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[TaskList_Categories]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [TaskCategory_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [TaskCategory_Text]&#xA;   FROM [dbo].[TaskList_Categories_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[TaskList_Categories] T &#xA;              WHERE T.TaskCategory_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT TaskCategory_ID FROM [dbo].[TaskList_Categories] T &#xA;              WHERE T.TaskCategory_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[TaskList_Categories] OUTPUT Inserted.TaskCategory_ID INTO @IdentityValue&#xA;&#x9;  SELECT TaskCategory_Text&#xA;   &#x9;&#x9;FROM [dbo].[TaskList_Categories_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.TaskCategory_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[TaskCategory_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[TaskList_Categories_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.TaskList_Categories ON; &#xA;INSERT INTO [dbo].[TaskList_Categories](TaskCategory_ID, TaskCategory_Text)&#xA;&#x9;SELECT TaskCategory_ID, TaskCategory_Text&#xA;   &#x9;FROM [dbo].[TaskList_Categories_MP] &#xA;SET IDENTITY_INSERT dbo.TaskList_Categories OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\TaxIDToUse_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="TaxIDToUse_Lib"
      DTS:DTSID="{078295C2-3F32-4798-AE5C-EF71091693AE}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="TaxIDToUse_Lib"
      DTS:ThreadHint="73">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*TaxIDToUse_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[TaxIDToUse_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[TaxIDToUse_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [TaxIDToUse_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [TaxIDToUse_Lib_Text]&#xA;   FROM [dbo].[TaxIDToUse_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[TaxIDToUse_Lib] T &#xA;              WHERE T.TaxIDToUse_Lib_Text = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT TaxIDToUse_Lib_ID FROM [dbo].[TaxIDToUse_Lib] T &#xA;              WHERE T.TaxIDToUse_Lib_Text = @LibName)&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;INSERT INTO [dbo].[TaxIDToUse_Lib] OUTPUT Inserted.TaxIDToUse_Lib_ID INTO @IdentityValue&#xA;&#x9;  SELECT TaxIDToUse_Lib_Text&#xA;   &#x9;&#x9;FROM [dbo].[TaxIDToUse_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;PRINT 'Data inserted' &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.TaxIDToUse_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[TaxIDToUse_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[TaxIDToUse_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.TaxIDToUse_Lib ON; &#xA;INSERT INTO [dbo].[TaxIDToUse_Lib](TaxIDToUse_Lib_ID, TaxIDToUse_Lib_Text)&#xA;&#x9;SELECT TaxIDToUse_Lib_ID, TaxIDToUse_Lib_Text&#xA;   &#x9;FROM [dbo].[TaxIDToUse_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.TaxIDToUse_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;  &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\TemplateDoc"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="TemplateDoc"
      DTS:DTSID="{76EEF3AB-1312-4EE8-8616-69D60BFB3A8E}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="TemplateDoc"
      DTS:ThreadHint="74">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*TemplateDoc*/&#xA;BEGIN TRANSACTION;&#xA;&#xA;BEGIN TRY  &#xA;&#xA;--UPDATE ByWho column&#xA;UPDATE [dbo].[TemplateDoc_MP]&#xA;SET [ByWho] = um.[PPC_SysUserID]&#xA;FROM [dbo].[TemplateDoc_MP] bc&#xA;JOIN [dbo].[UserID_Mapping] um ON bc.ByWho=um.[MyPlans_SysUserID]&#xA;WHERE bc.ByWho != -1&#xA;&#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;    @MaxId = MAX(LoopId)&#xA;FROM [dbo].[TemplateDoc_MP]&#xA;&#xA;IF ((SELECT COUNT(*)&#xA;FROM [dbo].[TemplateDoc]) &gt; 0)&#xA;BEGIN&#xA;    WHILE ( @LoopCounter IS NOT NULL&#xA;        AND @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;        SELECT @OldID = [Template_ID],&#xA;            @LibName = [Document_Type]&#xA;        FROM [dbo].[TemplateDoc_MP]&#xA;        WHERE LoopId = @LoopCounter&#xA;        PRINT @LibName&#xA;&#xA;&#xA;        IF EXISTS(SELECT 1&#xA;        FROM [dbo].[TemplateDoc] T&#xA;        WHERE T.Document_Type = @LibName) &#xA;BEGIN&#xA;            SET @NewID = (SELECT Template_ID&#xA;            FROM [dbo].[TemplateDoc] T&#xA;            WHERE T.Document_Type = @LibName)&#xA;        END&#xA;ELSE&#xA;BEGIN&#xA;            INSERT INTO [dbo].[TemplateDoc]&#xA;            OUTPUT Inserted.Template_ID INTO @IdentityValue&#xA;            SELECT &#xA;Document_Type,&#xA;Document_Text,&#xA;lastTouched,&#xA;byWho&#xA;            FROM [dbo].[TemplateDoc_MP]&#xA;            WHERE LoopId = @LoopCounter&#xA;            SET @NewID = (SELECT TOP 1&#xA;                ID&#xA;            FROM @IdentityValue);&#xA;            PRINT 'Data inserted'&#xA;            DELETE FROM @IdentityValue;&#xA;        END&#xA;&#xA;        IF OBJECT_ID('dbo.TemplateDoc_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;            INSERT INTO [dbo].[TemplateDoc_ID_Mapping]&#xA;            VALUES(@OldID, @NewID)&#xA;        END&#xA;&#xA;        SELECT @LoopCounter  = MIN(LoopId)&#xA;        FROM [dbo].[TemplateDoc_MP]&#xA;        WHERE LoopId &gt; @LoopCounter&#xA;&#xA;    END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;    SET IDENTITY_INSERT dbo.TemplateDoc ON;&#xA;    INSERT INTO [dbo].[TemplateDoc]&#xA;        (Template_ID,&#xA;Document_Type,&#xA;Document_Text,&#xA;lastTouched,&#xA;byWho)&#xA;    SELECT Template_ID,&#xA;Document_Type,&#xA;Document_Text,&#xA;lastTouched,&#xA;byWho&#xA;    FROM [dbo].[TemplateDoc_MP]&#xA;    SET IDENTITY_INSERT dbo.TemplateDoc OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;VALUES&#xA;    (SUSER_SNAME(),&#xA;        ERROR_NUMBER(),&#xA;        ERROR_STATE(),&#xA;        ERROR_SEVERITY(),&#xA;        ERROR_LINE(),&#xA;        ERROR_PROCEDURE(),&#xA;        ERROR_MESSAGE(),&#xA;        GETDATE());  &#xA;  &#xA;END CATCH;&#xA;&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\TemplateEmail"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="TemplateEmail"
      DTS:DTSID="{BBB4D9AC-3091-4EC2-9234-559459C87B3E}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="TemplateEmail"
      DTS:ThreadHint="75">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*TemplateEmail*/&#xA;BEGIN TRANSACTION;&#xA;&#xA;BEGIN TRY  &#xA;&#xA;--UPDATE ByWho column&#xA;UPDATE [dbo].[TemplateEmail_MP]&#xA;SET [ByWho] = um.[PPC_SysUserID]&#xA;FROM [dbo].[TemplateEmail_MP] bc&#xA;JOIN [dbo].[UserID_Mapping] um ON bc.ByWho=um.[MyPlans_SysUserID]&#xA;WHERE bc.ByWho != -1&#xA;&#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;    @MaxId = MAX(LoopId)&#xA;FROM [dbo].[TemplateEmail_MP]&#xA;&#xA;IF ((SELECT COUNT(*)&#xA;FROM [dbo].[TemplateEmail]) &gt; 0)&#xA;BEGIN&#xA;    WHILE ( @LoopCounter IS NOT NULL&#xA;        AND @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;        SELECT @OldID = [Template_ID],&#xA;            @LibName = [Template_Type]&#xA;        FROM [dbo].[TemplateEmail_MP]&#xA;        WHERE LoopId = @LoopCounter&#xA;        PRINT @LibName&#xA;&#xA;&#xA;        IF EXISTS(SELECT 1&#xA;        FROM [dbo].[TemplateEmail] T&#xA;        WHERE T.Template_Type = @LibName) &#xA;BEGIN&#xA;            SET @NewID = (SELECT Template_ID&#xA;            FROM [dbo].[TemplateEmail] T&#xA;            WHERE T.Template_Type = @LibName)&#xA;        END&#xA;ELSE&#xA;BEGIN&#xA;            INSERT INTO [dbo].[TemplateEmail]&#xA;            OUTPUT Inserted.Template_ID INTO @IdentityValue&#xA;            SELECT &#xA;Template_Type,&#xA;Template_Text,&#xA;Email_Sub,&#xA;lastTouched,&#xA;byWho&#xA;            FROM [dbo].[TemplateEmail_MP]&#xA;            WHERE LoopId = @LoopCounter&#xA;            SET @NewID = (SELECT TOP 1&#xA;                ID&#xA;            FROM @IdentityValue);&#xA;            PRINT 'Data inserted'&#xA;            DELETE FROM @IdentityValue;&#xA;        END&#xA;&#xA;        IF OBJECT_ID('dbo.TemplateEmail_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;            INSERT INTO [dbo].[TemplateEmail_ID_Mapping]&#xA;            VALUES(@OldID, @NewID)&#xA;        END&#xA;&#xA;        SELECT @LoopCounter  = MIN(LoopId)&#xA;        FROM [dbo].[TemplateEmail_MP]&#xA;        WHERE LoopId &gt; @LoopCounter&#xA;&#xA;    END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;    SET IDENTITY_INSERT dbo.TemplateEmail ON;&#xA;    INSERT INTO [dbo].[TemplateEmail]&#xA;        (Template_ID,&#xA;Template_Type,&#xA;Template_Text,&#xA;Email_Sub,&#xA;lastTouched,&#xA;byWho)&#xA;    SELECT Template_ID,&#xA;Template_Type,&#xA;Template_Text,&#xA;Email_Sub,&#xA;lastTouched,&#xA;byWho&#xA;    FROM [dbo].[TemplateEmail_MP]&#xA;    SET IDENTITY_INSERT dbo.TemplateEmail OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;VALUES&#xA;    (SUSER_SNAME(),&#xA;        ERROR_NUMBER(),&#xA;        ERROR_STATE(),&#xA;        ERROR_SEVERITY(),&#xA;        ERROR_LINE(),&#xA;        ERROR_PROCEDURE(),&#xA;        ERROR_MESSAGE(),&#xA;        GETDATE());  &#xA;  &#xA;END CATCH;&#xA;&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\TermsOfTermination_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="TermsOfTermination_Lib"
      DTS:DTSID="{5F46B404-4D83-4256-AABB-EDA754DBF0EA}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="TermsOfTermination_Lib"
      DTS:ThreadHint="76">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*TermsOfTermination_Lib*/&#xA;BEGIN TRANSACTION;&#xA;&#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;    @MaxId = MAX(LoopId)&#xA;FROM [dbo].[TermsOfTermination_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*)&#xA;FROM [dbo].[TermsOfTermination_Lib]) &gt; 0)&#xA;BEGIN&#xA;    WHILE ( @LoopCounter IS NOT NULL&#xA;        AND @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;        SELECT @OldID = [TermsOfTermination_Lib_ID],&#xA;            @LibName = [TermsOfTermination_Lib_Text]&#xA;        FROM [dbo].[TermsOfTermination_Lib_MP]&#xA;        WHERE LoopId = @LoopCounter&#xA;        PRINT @LibName&#xA;&#xA;&#xA;        IF EXISTS(SELECT 1&#xA;        FROM [dbo].[TermsOfTermination_Lib] T&#xA;        WHERE T.TermsOfTermination_Lib_Text = @LibName) &#xA;BEGIN&#xA;            SET @NewID = (SELECT TermsOfTermination_Lib_ID&#xA;            FROM [dbo].[TermsOfTermination_Lib] T&#xA;            WHERE T.TermsOfTermination_Lib_Text = @LibName)&#xA;        END&#xA;ELSE&#xA;BEGIN&#xA;            INSERT INTO [dbo].[TermsOfTermination_Lib]&#xA;            OUTPUT Inserted.TermsOfTermination_Lib_ID INTO @IdentityValue&#xA;            SELECT TermsOfTermination_Lib_Text&#xA;            FROM [dbo].[TermsOfTermination_Lib_MP]&#xA;            WHERE LoopId = @LoopCounter&#xA;            SET @NewID = (SELECT TOP 1&#xA;                ID&#xA;            FROM @IdentityValue);&#xA;            PRINT 'Data inserted'&#xA;            DELETE FROM @IdentityValue;&#xA;        END&#xA;&#xA;        IF OBJECT_ID('dbo.TermsOfTermination_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;            INSERT INTO [dbo].[TermsOfTermination_Lib_ID_Mapping]&#xA;            VALUES(@OldID, @NewID)&#xA;        END&#xA;&#xA;        SELECT @LoopCounter  = MIN(LoopId)&#xA;        FROM [dbo].[TermsOfTermination_Lib_MP]&#xA;        WHERE LoopId &gt; @LoopCounter&#xA;&#xA;    END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;    SET IDENTITY_INSERT dbo.TermsOfTermination_Lib ON;&#xA;    INSERT INTO [dbo].[TermsOfTermination_Lib]&#xA;        (TermsOfTermination_Lib_ID, TermsOfTermination_Lib_Text)&#xA;    SELECT TermsOfTermination_Lib_ID, TermsOfTermination_Lib_Text&#xA;    FROM [dbo].[TermsOfTermination_Lib_MP]&#xA;    SET IDENTITY_INSERT dbo.TermsOfTermination_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;VALUES&#xA;    (SUSER_SNAME(),&#xA;        ERROR_NUMBER(),&#xA;        ERROR_STATE(),&#xA;        ERROR_SEVERITY(),&#xA;        ERROR_LINE(),&#xA;        ERROR_PROCEDURE(),&#xA;        ERROR_MESSAGE(),&#xA;        GETDATE());  &#xA;  &#xA;END CATCH;&#xA;&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Testing_Status_Type"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Testing_Status_Type"
      DTS:DTSID="{B4736D1D-8A35-42F6-A73F-7319BCD3F636}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Testing_Status_Type"
      DTS:ThreadHint="77">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*Testing_Status_Type*/&#xA;BEGIN TRANSACTION;&#xA;&#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;    @MaxId = MAX(LoopId)&#xA;FROM [dbo].[Testing_Status_Type_MP]&#xA;&#xA;IF ((SELECT COUNT(*)&#xA;FROM [dbo].[Testing_Status_Type]) &gt; 0)&#xA;BEGIN&#xA;    WHILE ( @LoopCounter IS NOT NULL&#xA;        AND @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;        SELECT @OldID = [Testing_Status_Type_ID],&#xA;            @LibName = [Testing_Status_Type_Text]&#xA;        FROM [dbo].[Testing_Status_Type_MP]&#xA;        WHERE LoopId = @LoopCounter&#xA;        PRINT @LibName&#xA;&#xA;&#xA;        IF EXISTS(SELECT 1&#xA;        FROM [dbo].[Testing_Status_Type] T&#xA;        WHERE T.Testing_Status_Type_Text = @LibName) &#xA;BEGIN&#xA;            SET @NewID = (SELECT Testing_Status_Type_ID&#xA;            FROM [dbo].[Testing_Status_Type] T&#xA;            WHERE T.Testing_Status_Type_Text = @LibName)&#xA;        END&#xA;ELSE&#xA;BEGIN&#xA;            INSERT INTO [dbo].[Testing_Status_Type]&#xA;            OUTPUT Inserted.Testing_Status_Type_ID INTO @IdentityValue&#xA;            SELECT Testing_Status_Type_Text, Testing_Color&#xA;            FROM [dbo].[Testing_Status_Type_MP]&#xA;            WHERE LoopId = @LoopCounter&#xA;            SET @NewID = (SELECT TOP 1&#xA;                ID&#xA;            FROM @IdentityValue);&#xA;            PRINT 'Data inserted'&#xA;            DELETE FROM @IdentityValue;&#xA;        END&#xA;&#xA;        IF OBJECT_ID('dbo.Testing_Status_Type_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;            INSERT INTO [dbo].[Testing_Status_Type_ID_Mapping]&#xA;            VALUES(@OldID, @NewID)&#xA;        END&#xA;&#xA;        SELECT @LoopCounter  = MIN(LoopId)&#xA;        FROM [dbo].[Testing_Status_Type_MP]&#xA;        WHERE LoopId &gt; @LoopCounter&#xA;&#xA;    END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;    SET IDENTITY_INSERT dbo.Testing_Status_Type ON;&#xA;    INSERT INTO [dbo].[Testing_Status_Type]&#xA;        (Testing_Status_Type_ID, Testing_Status_Type_Text, Testing_Color)&#xA;    SELECT Testing_Status_Type_ID, Testing_Status_Type_Text, Testing_Color&#xA;    FROM [dbo].[Testing_Status_Type_MP]&#xA;    SET IDENTITY_INSERT dbo.Testing_Status_Type OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;VALUES&#xA;    (SUSER_SNAME(),&#xA;        ERROR_NUMBER(),&#xA;        ERROR_STATE(),&#xA;        ERROR_SEVERITY(),&#xA;        ERROR_LINE(),&#xA;        ERROR_PROCEDURE(),&#xA;        ERROR_MESSAGE(),&#xA;        GETDATE());  &#xA;   &#xA;END CATCH;&#xA;&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\VestingAcceleration_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="VestingAcceleration_Lib"
      DTS:DTSID="{C337CD18-E52C-4111-8A6D-DE686D67062C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="VestingAcceleration_Lib"
      DTS:ThreadHint="78">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*VestingAcceleration_Lib*/&#xA;BEGIN TRANSACTION;&#xA;&#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;    @MaxId = MAX(LoopId)&#xA;FROM [dbo].[VestingAcceleration_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*)&#xA;FROM [dbo].[VestingAcceleration_Lib]) &gt; 0)&#xA;BEGIN&#xA;    WHILE ( @LoopCounter IS NOT NULL&#xA;        AND @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;        SELECT @OldID = [VestingAcceleration_Lib_ID],&#xA;            @LibName = [VestingAcceleration_Lib_Text]&#xA;        FROM [dbo].[VestingAcceleration_Lib_MP]&#xA;        WHERE LoopId = @LoopCounter&#xA;        PRINT @LibName&#xA;&#xA;&#xA;        IF EXISTS(SELECT 1&#xA;        FROM [dbo].[VestingAcceleration_Lib] T&#xA;        WHERE T.VestingAcceleration_Lib_Text = @LibName) &#xA;BEGIN&#xA;            SET @NewID = (SELECT VestingAcceleration_Lib_ID&#xA;            FROM [dbo].[VestingAcceleration_Lib] T&#xA;            WHERE T.VestingAcceleration_Lib_Text = @LibName)&#xA;        END&#xA;ELSE&#xA;BEGIN&#xA;            INSERT INTO [dbo].[VestingAcceleration_Lib]&#xA;            OUTPUT Inserted.VestingAcceleration_Lib_ID INTO @IdentityValue&#xA;            SELECT VestingAcceleration_Lib_Text&#xA;            FROM [dbo].[VestingAcceleration_Lib_MP]&#xA;            WHERE LoopId = @LoopCounter&#xA;            SET @NewID = (SELECT TOP 1&#xA;                ID&#xA;            FROM @IdentityValue);&#xA;            PRINT 'Data inserted'&#xA;            DELETE FROM @IdentityValue;&#xA;        END&#xA;&#xA;        IF OBJECT_ID('dbo.VestingAcceleration_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;            INSERT INTO [dbo].[VestingAcceleration_Lib_ID_Mapping]&#xA;            VALUES(@OldID, @NewID)&#xA;        END&#xA;&#xA;        SELECT @LoopCounter  = MIN(LoopId)&#xA;        FROM [dbo].[VestingAcceleration_Lib_MP]&#xA;        WHERE LoopId &gt; @LoopCounter&#xA;&#xA;    END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;    SET IDENTITY_INSERT dbo.VestingAcceleration_Lib ON;&#xA;    INSERT INTO [dbo].[VestingAcceleration_Lib]&#xA;        (VestingAcceleration_Lib_ID, VestingAcceleration_Lib_Text)&#xA;    SELECT VestingAcceleration_Lib_ID, VestingAcceleration_Lib_Text&#xA;    FROM [dbo].[VestingAcceleration_Lib_MP]&#xA;    SET IDENTITY_INSERT dbo.VestingAcceleration_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;VALUES&#xA;    (SUSER_SNAME(),&#xA;        ERROR_NUMBER(),&#xA;        ERROR_STATE(),&#xA;        ERROR_SEVERITY(),&#xA;        ERROR_LINE(),&#xA;        ERROR_PROCEDURE(),&#xA;        ERROR_MESSAGE(),&#xA;        GETDATE());  &#xA;  &#xA;END CATCH;&#xA;&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\VestingExclusions_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="VestingExclusions_Lib"
      DTS:DTSID="{A524AAE4-5874-4B03-8DAE-125597B9D2D8}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="VestingExclusions_Lib"
      DTS:ThreadHint="62">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*VestingExclusions_Lib*/&#xA;BEGIN TRANSACTION;&#xA;&#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;    @MaxId = MAX(LoopId)&#xA;FROM [dbo].[VestingExclusions_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*)&#xA;FROM [dbo].[VestingExclusions_Lib]) &gt; 0)&#xA;BEGIN&#xA;    WHILE ( @LoopCounter IS NOT NULL&#xA;        AND @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;        SELECT @OldID = [VestingExclusions_Lib_ID],&#xA;            @LibName = [VestingExclusions_Lib_Text]&#xA;        FROM [dbo].[VestingExclusions_Lib_MP]&#xA;        WHERE LoopId = @LoopCounter&#xA;        PRINT @LibName&#xA;&#xA;&#xA;        IF EXISTS(SELECT 1&#xA;        FROM [dbo].[VestingExclusions_Lib] T&#xA;        WHERE T.VestingExclusions_Lib_Text = @LibName) &#xA;BEGIN&#xA;            SET @NewID = (SELECT VestingExclusions_Lib_ID&#xA;            FROM [dbo].[VestingExclusions_Lib] T&#xA;            WHERE T.VestingExclusions_Lib_Text = @LibName)&#xA;        END&#xA;ELSE&#xA;BEGIN&#xA;            INSERT INTO [dbo].[VestingExclusions_Lib]&#xA;            OUTPUT Inserted.VestingExclusions_Lib_ID INTO @IdentityValue&#xA;            SELECT VestingExclusions_Lib_Text&#xA;            FROM [dbo].[VestingExclusions_Lib_MP]&#xA;            WHERE LoopId = @LoopCounter&#xA;            SET @NewID = (SELECT TOP 1&#xA;                ID&#xA;            FROM @IdentityValue);&#xA;            PRINT 'Data inserted'&#xA;            DELETE FROM @IdentityValue;&#xA;        END&#xA;&#xA;        IF OBJECT_ID('dbo.VestingExclusions_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;            INSERT INTO [dbo].[VestingExclusions_Lib_ID_Mapping]&#xA;            VALUES(@OldID, @NewID)&#xA;        END&#xA;&#xA;        SELECT @LoopCounter  = MIN(LoopId)&#xA;        FROM [dbo].[VestingExclusions_Lib_MP]&#xA;        WHERE LoopId &gt; @LoopCounter&#xA;&#xA;    END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;    SET IDENTITY_INSERT dbo.VestingExclusions_Lib ON;&#xA;    INSERT INTO [dbo].[VestingExclusions_Lib]&#xA;        (VestingExclusions_Lib_ID, VestingExclusions_Lib_Text)&#xA;    SELECT VestingExclusions_Lib_ID, VestingExclusions_Lib_Text&#xA;    FROM [dbo].[VestingExclusions_Lib_MP]&#xA;    SET IDENTITY_INSERT dbo.VestingExclusions_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;VALUES&#xA;    (SUSER_SNAME(),&#xA;        ERROR_NUMBER(),&#xA;        ERROR_STATE(),&#xA;        ERROR_SEVERITY(),&#xA;        ERROR_LINE(),&#xA;        ERROR_PROCEDURE(),&#xA;        ERROR_MESSAGE(),&#xA;        GETDATE());  &#xA;  &#xA;END CATCH;&#xA;&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\VestingSource_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="VestingSource_Lib"
      DTS:DTSID="{4A865A0E-62EB-4028-A8AC-060C549F195F}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="VestingSource_Lib"
      DTS:ThreadHint="63">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*VestingSource_Lib*/&#xA;BEGIN TRANSACTION;&#xA;&#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(100), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;    @MaxId = MAX(LoopId)&#xA;FROM [dbo].[VestingSource_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*)&#xA;FROM [dbo].[VestingSource_Lib]) &gt; 0)&#xA;BEGIN&#xA;    WHILE ( @LoopCounter IS NOT NULL&#xA;        AND @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;        SELECT @OldID = [VestingSource_Lib_ID],&#xA;            @LibName = [VestingSource_Lib_Text]&#xA;        FROM [dbo].[VestingSource_Lib_MP]&#xA;        WHERE LoopId = @LoopCounter&#xA;        PRINT @LibName&#xA;&#xA;&#xA;        IF EXISTS(SELECT 1&#xA;        FROM [dbo].[VestingSource_Lib] T&#xA;        WHERE T.VestingSource_Lib_Text = @LibName) &#xA;BEGIN&#xA;            SET @NewID = (SELECT VestingSource_Lib_ID&#xA;            FROM [dbo].[VestingSource_Lib] T&#xA;            WHERE T.VestingSource_Lib_Text = @LibName)&#xA;        END&#xA;ELSE&#xA;BEGIN&#xA;            INSERT INTO [dbo].[VestingSource_Lib]&#xA;            OUTPUT Inserted.VestingSource_Lib_ID INTO @IdentityValue&#xA;            SELECT VestingSource_Lib_Text&#xA;            FROM [dbo].[VestingSource_Lib_MP]&#xA;            WHERE LoopId = @LoopCounter&#xA;            SET @NewID = (SELECT TOP 1&#xA;                ID&#xA;            FROM @IdentityValue);&#xA;            PRINT 'Data inserted'&#xA;            DELETE FROM @IdentityValue;&#xA;        END&#xA;&#xA;        IF OBJECT_ID('dbo.VestingSource_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;            INSERT INTO [dbo].[VestingSource_Lib_ID_Mapping]&#xA;            VALUES(@OldID, @NewID)&#xA;        END&#xA;&#xA;        SELECT @LoopCounter  = MIN(LoopId)&#xA;        FROM [dbo].[VestingSource_Lib_MP]&#xA;        WHERE LoopId &gt; @LoopCounter&#xA;&#xA;    END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;    SET IDENTITY_INSERT dbo.VestingSource_Lib ON;&#xA;    INSERT INTO [dbo].[VestingSource_Lib]&#xA;        (VestingSource_Lib_ID, VestingSource_Lib_Text)&#xA;    SELECT VestingSource_Lib_ID, VestingSource_Lib_Text&#xA;    FROM [dbo].[VestingSource_Lib_MP]&#xA;    SET IDENTITY_INSERT dbo.VestingSource_Lib OFF;&#xA;END&#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;VALUES&#xA;    (SUSER_SNAME(),&#xA;        ERROR_NUMBER(),&#xA;        ERROR_STATE(),&#xA;        ERROR_SEVERITY(),&#xA;        ERROR_LINE(),&#xA;        ERROR_PROCEDURE(),&#xA;        ERROR_MESSAGE(),&#xA;        GETDATE());  &#xA;  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION;  &#xA;END CATCH;&#xA;&#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\WhoPaysFee_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="WhoPaysFee_Lib"
      DTS:DTSID="{1CF4054C-ABA4-43E8-A867-BC837A2407E1}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="WhoPaysFee_Lib"
      DTS:ThreadHint="64">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*Migration Script*/&#xA;/*WhoPaysFee_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(MAX), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[WhoPaysFee_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[WhoPaysFee_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [WhoPaysFee_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [WhoPaysFee_Lib_Text]&#xA;   FROM [dbo].[WhoPaysFee_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[WhoPaysFee_Lib] T &#xA;              WHERE T.[WhoPaysFee_Lib_Text] = @LibName) &#xA;BEGIN&#xA;&#x9;PRINT 'Data exists already'&#xA;    SET @NewID = (SELECT TOP 1 [WhoPaysFee_Lib_ID] FROM [dbo].[WhoPaysFee_Lib] T &#xA;              WHERE T.[WhoPaysFee_Lib_Text] = @LibName)&#xA;&#x9;PRINT @NewID&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;IF(@OldID = -1)&#xA;&#x9;BEGIN&#xA;&#x9;SET IDENTITY_INSERT dbo.WhoPaysFee_Lib ON; &#xA;&#x9;INSERT INTO [dbo].[WhoPaysFee_Lib]([WhoPaysFee_Lib_ID], [WhoPaysFee_Lib_Text], [PlanRestriction]) OUTPUT Inserted.[WhoPaysFee_Lib_ID] INTO @IdentityValue&#xA;&#x9;&#x9;SELECT [WhoPaysFee_Lib_ID], [WhoPaysFee_Lib_Text], [PlanRestriction]&#xA;   &#x9;&#x9;FROM [dbo].[WhoPaysFee_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET IDENTITY_INSERT dbo.WhoPaysFee_Lib OFF;&#xA;&#x9;END&#xA;&#x9;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[WhoPaysFee_Lib] OUTPUT Inserted.[WhoPaysFee_Lib_ID] INTO @IdentityValue&#xA;&#x9;  SELECT [WhoPaysFee_Lib_Text], [PlanRestriction]&#xA;   &#x9;&#x9;FROM [dbo].[WhoPaysFee_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;END&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;&#x9;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.WhoPaysFee_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[WhoPaysFee_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[WhoPaysFee_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.WhoPaysFee_Lib ON; &#xA;INSERT INTO [dbo].[WhoPaysFee_Lib]([WhoPaysFee_Lib_ID], [WhoPaysFee_Lib_Text], [PlanRestriction])&#xA;&#x9;SELECT [WhoPaysFee_Lib_ID], [WhoPaysFee_Lib_Text], [PlanRestriction]&#xA;   &#x9;FROM [dbo].[WhoPaysFee_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.WhoPaysFee_Lib OFF;&#xA;END  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;   &#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\WhoRemitsWithholding_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="WhoRemitsWithholding_Lib"
      DTS:DTSID="{462B04B1-C8FB-4F4F-B51B-07A02B1D865E}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="WhoRemitsWithholding_Lib"
      DTS:ThreadHint="65">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*WhoRemitsWithholding_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(MAX), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[WhoRemitsWithholding_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[WhoRemitsWithholding_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [WhoRemitsWithholding_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [WhoRemitsWithholding_Lib_Text]&#xA;   FROM [dbo].[WhoRemitsWithholding_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[WhoRemitsWithholding_Lib] T &#xA;              WHERE T.[WhoRemitsWithholding_Lib_Text] = @LibName) &#xA;BEGIN&#xA;&#x9;PRINT 'Data exists already'&#xA;    SET @NewID = (SELECT TOP 1 [WhoRemitsWithholding_Lib_ID] FROM [dbo].[WhoRemitsWithholding_Lib] T &#xA;              WHERE T.[WhoRemitsWithholding_Lib_Text] = @LibName)&#xA;&#x9;PRINT @NewID&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;IF(@OldID = -1)&#xA;&#x9;BEGIN&#xA;&#x9;SET IDENTITY_INSERT dbo.WhoRemitsWithholding_Lib ON; &#xA;&#x9;INSERT INTO [dbo].[WhoRemitsWithholding_Lib]([WhoRemitsWithholding_Lib_ID], [WhoRemitsWithholding_Lib_Text]) OUTPUT Inserted.[WhoRemitsWithholding_Lib_ID] INTO @IdentityValue&#xA;&#x9;&#x9;SELECT [WhoRemitsWithholding_Lib_ID], [WhoRemitsWithholding_Lib_Text]&#xA;   &#x9;&#x9;FROM [dbo].[WhoRemitsWithholding_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET IDENTITY_INSERT dbo.WhoRemitsWithholding_Lib OFF;&#xA;&#x9;END&#xA;&#x9;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[WhoRemitsWithholding_Lib] OUTPUT Inserted.[WhoRemitsWithholding_Lib_ID] INTO @IdentityValue&#xA;&#x9;  SELECT [WhoRemitsWithholding_Lib_Text]&#xA;   &#x9;&#x9;FROM [dbo].[WhoRemitsWithholding_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;END&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;&#x9;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.WhoRemitsWithholding_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[WhoRemitsWithholding_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[WhoRemitsWithholding_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.WhoRemitsWithholding_Lib ON; &#xA;INSERT INTO [dbo].[WhoRemitsWithholding_Lib]([WhoRemitsWithholding_Lib_ID], [WhoRemitsWithholding_Lib_Text])&#xA;&#x9;SELECT [WhoRemitsWithholding_Lib_ID], [WhoRemitsWithholding_Lib_Text]&#xA;   &#x9;FROM [dbo].[WhoRemitsWithholding_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.WhoRemitsWithholding_Lib OFF;&#xA;END  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;   &#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\YearEndNoteCategory"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="YearEndNoteCategory"
      DTS:DTSID="{9FCB5404-8E42-4F5B-8EBB-C5B50A83DE37}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="YearEndNoteCategory"
      DTS:ThreadHint="66">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*YearEndNoteCategory*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(MAX), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[YearEndNoteCategory_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[YearEndNoteCategory]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [YearEndNoteCategory_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [YearEndNoteCategory_Text]&#xA;   FROM [dbo].[YearEndNoteCategory_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[YearEndNoteCategory] T &#xA;              WHERE T.[YearEndNoteCategory_Text] = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT TOP 1 [YearEndNoteCategory_ID] FROM [dbo].[YearEndNoteCategory] T &#xA;              WHERE T.[YearEndNoteCategory_Text] = @LibName)&#xA;&#x9;PRINT @NewID&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;IF(@OldID = -1)&#xA;&#x9;BEGIN&#xA;&#x9;SET IDENTITY_INSERT dbo.YearEndNoteCategory ON; &#xA;&#x9;INSERT INTO [dbo].[YearEndNoteCategory]([YearEndNoteCategory_ID], [YearEndNoteCategory_Text]) OUTPUT Inserted.[YearEndNoteCategory_ID] INTO @IdentityValue&#xA;&#x9;&#x9;SELECT [YearEndNoteCategory_ID], [YearEndNoteCategory_Text]&#xA;   &#x9;&#x9;FROM [dbo].[YearEndNoteCategory_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET IDENTITY_INSERT dbo.YearEndNoteCategory OFF;&#xA;&#x9;END&#xA;&#x9;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[YearEndNoteCategory] OUTPUT Inserted.[YearEndNoteCategory_ID] INTO @IdentityValue&#xA;&#x9;  SELECT [YearEndNoteCategory_Text]&#xA;   &#x9;&#x9;FROM [dbo].[YearEndNoteCategory_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;END&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;&#x9;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.YearEndNoteCategory_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[YearEndNoteCategory_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[YearEndNoteCategory_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.YearEndNoteCategory ON; &#xA;INSERT INTO [dbo].[YearEndNoteCategory]([YearEndNoteCategory_ID], [YearEndNoteCategory_Text])&#xA;&#x9;SELECT [YearEndNoteCategory_ID], [YearEndNoteCategory_Text]&#xA;   &#x9;FROM [dbo].[YearEndNoteCategory_MP] &#xA;SET IDENTITY_INSERT dbo.YearEndNoteCategory OFF;&#xA;END  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;   &#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;  &#xA;  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;  &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\YearsRequirement_Lib"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="YearsRequirement_Lib"
      DTS:DTSID="{200EB3AC-1670-4F8F-80AF-06045552A42A}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="YearsRequirement_Lib"
      DTS:ThreadHint="67">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FB000E58-A956-4AA8-BD26-5238BE63E8B0}"
          SQLTask:SqlStatementSource="/*YearsRequirement_Lib*/&#xA;BEGIN TRANSACTION;  &#xA;  &#xA;BEGIN TRY  &#xA;DECLARE @LoopCounter INT , @MaxId INT, @LibName NVARCHAR(MAX), @OldID INT, @NewID INT;&#xA;DECLARE @IdentityValue AS TABLE(ID INT); &#xA;SELECT @LoopCounter = MIN(LoopId),&#xA;&#x9;&#x9;@MaxId = MAX(LoopId) &#xA;FROM [dbo].[YearsRequirement_Lib_MP]&#xA;&#xA;IF ((SELECT COUNT(*) FROM [dbo].[YearsRequirement_Lib]) &gt; 0)&#xA;BEGIN&#xA;WHILE ( @LoopCounter IS NOT NULL&#xA;        AND  @LoopCounter &lt;= @MaxId)&#xA;BEGIN&#xA;   SELECT&#x9;@OldID = [YearsRequirement_Lib_ID],&#xA;&#x9;&#x9;&#x9;@LibName = [YearsRequirement_Lib_Text]&#xA;   FROM [dbo].[YearsRequirement_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;   PRINT @LibName &#xA;&#xA;IF EXISTS(SELECT 1 FROM [dbo].[YearsRequirement_Lib] T &#xA;              WHERE T.[YearsRequirement_Lib_Text] = @LibName) &#xA;BEGIN&#xA;    SET @NewID = (SELECT TOP 1 [YearsRequirement_Lib_ID] FROM [dbo].[YearsRequirement_Lib] T &#xA;              WHERE T.[YearsRequirement_Lib_Text] = @LibName)&#xA;&#x9;PRINT @NewID&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;&#x9;IF(@OldID = -1)&#xA;&#x9;BEGIN&#xA;&#x9;SET IDENTITY_INSERT dbo.YearsRequirement_Lib ON; &#xA;&#x9;INSERT INTO [dbo].[YearsRequirement_Lib]([YearsRequirement_Lib_ID], [YearsRequirement_Lib_Text]) OUTPUT Inserted.[YearsRequirement_Lib_ID] INTO @IdentityValue&#xA;&#x9;&#x9;SELECT [YearsRequirement_Lib_ID], [YearsRequirement_Lib_Text]&#xA;   &#x9;&#x9;FROM [dbo].[YearsRequirement_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;SET IDENTITY_INSERT dbo.YearsRequirement_Lib OFF;&#xA;&#x9;END&#xA;&#x9;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;INSERT INTO [dbo].[YearsRequirement_Lib] OUTPUT Inserted.[YearsRequirement_Lib_ID] INTO @IdentityValue&#xA;&#x9;  SELECT [YearsRequirement_Lib_Text]&#xA;   &#x9;&#x9;FROM [dbo].[YearsRequirement_Lib_MP]  WHERE LoopId = @LoopCounter&#xA;&#x9;END&#xA;&#x9;SET @NewID = (SELECT TOP 1 ID FROM @IdentityValue); &#xA;&#x9;DELETE FROM @IdentityValue;&#xA;&#x9;&#xA;END&#xA;&#xA; IF OBJECT_ID('dbo.YearsRequirement_Lib_ID_Mapping') IS NOT NULL&#xA; BEGIN&#xA;&#x9;INSERT INTO [dbo].[YearsRequirement_Lib_ID_Mapping]&#xA;&#x9;VALUES(@OldID, @NewID)   &#xA;END&#xA;&#xA;SELECT @LoopCounter  = MIN(LoopId) &#xA;   FROM [dbo].[YearsRequirement_Lib_MP]  WHERE LoopId &gt; @LoopCounter&#xA;&#xA;END&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;SET IDENTITY_INSERT dbo.YearsRequirement_Lib ON; &#xA;INSERT INTO [dbo].[YearsRequirement_Lib]([YearsRequirement_Lib_ID], [YearsRequirement_Lib_Text])&#xA;&#x9;SELECT [YearsRequirement_Lib_ID], [YearsRequirement_Lib_Text]&#xA;   &#x9;FROM [dbo].[YearsRequirement_Lib_MP] &#xA;SET IDENTITY_INSERT dbo.YearsRequirement_Lib OFF;&#xA;END  &#xA;IF @@TRANCOUNT &gt; 0  &#xA;    COMMIT TRANSACTION;   &#xA;END TRY  &#xA;BEGIN CATCH  &#xA;    IF @@TRANCOUNT &gt; 0  &#xA;        ROLLBACK TRANSACTION; &#xA;    INSERT INTO dbo.DataMigration_Errors&#xA;    VALUES&#xA;  (SUSER_SNAME(),&#xA;   ERROR_NUMBER(),&#xA;   ERROR_STATE(),&#xA;   ERROR_SEVERITY(),&#xA;   ERROR_LINE(),&#xA;   ERROR_PROCEDURE(),&#xA;   ERROR_MESSAGE(),&#xA;   GETDATE());  &#xA;   &#xA;END CATCH;   &#xA;GO  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="128" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="164.8,41.6"
          Id="Package\ACA_Type"
          TopLeft="213.833325054911,68.766667169465" />
        <NodeLayout
          Size="208,41.6"
          Id="Package\AccruedBenefit_Type"
          TopLeft="213.833325054911,170.366667169465" />
        <NodeLayout
          Size="134.4,41.6"
          Id="Package\ActivityType"
          TopLeft="213.833325054911,271.966667169465" />
        <NodeLayout
          Size="225.6,41.6"
          Id="Package\AgeRequirement_Lib"
          TopLeft="213.833325054911,373.566667169465" />
        <NodeLayout
          Size="225.6,41.6"
          Id="Package\AmendingTypeLib"
          TopLeft="215.49999165535,476.033333843019" />
        <NodeLayout
          Size="225.6,41.6"
          Id="Package\AnnualLoanMaintFee_Lib"
          TopLeft="213.833325054911,577.633333843019" />
        <NodeLayout
          Size="225.6,41.6"
          Id="Package\AutoRolloverProvider_Lib"
          TopLeft="213.833325054911,679.233333843019" />
        <NodeLayout
          Size="324.8,41.6"
          Id="Package\AvgMonthlyCompensationFrom_Type"
          TopLeft="213.833325054911,780.833333843019" />
        <NodeLayout
          Size="324.8,41.6"
          Id="Package\Billing_Type"
          TopLeft="213.833325054911,882.433333843019" />
        <NodeLayout
          Size="149.6,41.6"
          Id="Package\BondingCo_Lib"
          TopLeft="213.833325054911,984.033333843019" />
        <NodeLayout
          Size="149.6,41.6"
          Id="Package\Builder_Group"
          TopLeft="213.833325054911,1085.63333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\ClientToDoSectionLib"
          TopLeft="213.833325054911,1187.23333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\ComputationMethod_Lib"
          TopLeft="213.833325054911,1288.83333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\ComputationPeriod_Lib"
          TopLeft="213.833325054911,1390.43333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\ConsideredCompensationType"
          TopLeft="213.833325054911,1492.03333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\DefinedCompensationType"
          TopLeft="213.833325054911,1593.63333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\DeliverTo_Lib"
          TopLeft="213.833325054911,1695.23333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\DeliveryModeLib"
          TopLeft="213.833325054911,1796.83333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\DistDeliveryMethod_Lib"
          TopLeft="213.833325054911,1898.43333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\DistFeeAmounts_Lib"
          TopLeft="213.833325054911,2000.03333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\DistribServiceOptionsType"
          TopLeft="213.833325054911,2101.63333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\DistributionCharge"
          TopLeft="213.833325054911,2203.23333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\DistributionPayableToWhom_Lib"
          TopLeft="213.833325054911,2304.83333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\DistributionTiming_Lib"
          TopLeft="213.833325054911,2406.43333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\DistributionType_Lib"
          TopLeft="214.66665835513,2508.90000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\DistSourcesAllowed_Lib"
          TopLeft="213.833325054911,2610.50000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\DistTaxCode1099_Lib"
          TopLeft="213.833325054911,2712.10000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\Doc_Types"
          TopLeft="213.833325054911,2813.70000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\DocumentWorkLib"
          TopLeft="213.833325054911,2915.30000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\EarningsAllocationType"
          TopLeft="213.833325054911,3016.90000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\Egtrra_Group"
          TopLeft="213.833325054911,3118.50000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\ElementDataTypes"
          TopLeft="213.833325054911,3220.10000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\EntryDate_Type"
          TopLeft="213.833325054911,3321.70000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\EntryDateNear_Type"
          TopLeft="213.833325054911,3423.30000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\EntryDateUM_Type"
          TopLeft="213.833325054911,3524.90000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\FormsToBeUsed_Lib"
          TopLeft="213.833325054911,3626.50000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\HarshipNotes_Lib"
          TopLeft="213.833325054911,3728.10000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\InServiceNotes_Lib"
          TopLeft="213.833325054911,3829.70000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\InterestRate_Lib"
          TopLeft="213.833325054911,3931.30000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\InterestRateType"
          TopLeft="213.833325054911,4032.90000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\InvestmentPlatforms_Lib"
          TopLeft="213.833325054911,4134.50000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\InvoiceMethod_Lib"
          TopLeft="213.833325054911,4236.10000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\LoanCharge"
          TopLeft="213.833325054911,4337.70000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\LoanFee_Lib"
          TopLeft="213.833325054911,4439.30000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\LoanPurpose_Lib"
          TopLeft="213.833325054911,4540.90000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\LoanPurposeType"
          TopLeft="213.833325054911,4642.50000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\LoanRefinanceCharge"
          TopLeft="217.166658255789,4744.10000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\LoanTaxCode1099_Lib"
          TopLeft="213.833325054911,4845.70000051657" />
        <NodeLayout
          Size="267.2,41.6"
          Id="Package\ManditoryAutoRolloverProvisions_Lib"
          TopLeft="213.833325054911,4947.30000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\ManditoryCashOutProvisions_Lib"
          TopLeft="213.833325054911,5048.90000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\MatchPeriodType"
          TopLeft="213.833325054911,5150.50000051657" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\MatchType"
          TopLeft="213.833325054911,5252.10000051658" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\MortalityType"
          TopLeft="213.833325054911,5352.83333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\NoQBSReason_Lib"
          TopLeft="213.833325054911,5454.43333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\NormalFormOfBenefit_Lib"
          TopLeft="213.833325054911,5556.03333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\NormalRetirementAge_Lib"
          TopLeft="213.833325054911,5657.63333384302" />
        <NodeLayout
          Size="204.8,41.6"
          Id="Package\NormalRetirementDate_Lib"
          TopLeft="212.999991754691,5759.23333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\NormRetireDate_Type"
          TopLeft="213.833325054911,5860.83333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\NormRetireDateNear_Type"
          TopLeft="213.833325054911,5962.43333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\NormRetireDateUM_Type"
          TopLeft="213.833325054911,6064.03333384302" />
        <NodeLayout
          Size="239.2,41.6"
          Id="Package\NormRetireForm_Type"
          TopLeft="213.833325054911,6165.63333384302" />
        <NodeLayout
          Size="171.2,41.6"
          Id="Package\NumberAllowed_Lib"
          TopLeft="213.833325054911,6267.23333384302" />
        <NodeLayout
          Size="255.2,41.6"
          Id="Package\PayrollFrequency_Lib"
          TopLeft="215.49999165535,6368.83333384302" />
        <NodeLayout
          Size="255.2,41.6"
          Id="Package\PayrollProvider"
          TopLeft="213.833325054911,6470.43333384303" />
        <NodeLayout
          Size="255.2,41.6"
          Id="Package\PlanParticipantType_Lib"
          TopLeft="213.833325054911,6572.03333384303" />
        <NodeLayout
          Size="255.2,41.6"
          Id="Package\Portal_DocMaintainedBy"
          TopLeft="213.833325054911,6673.63333384303" />
        <NodeLayout
          Size="255.2,41.6"
          Id="Package\Portal_NewTPAFirm"
          TopLeft="213.833325054911,6775.23333384303" />
        <NodeLayout
          Size="255.2,41.6"
          Id="Package\Portal_ReasonForDeparture"
          TopLeft="213.833325054911,6876.83333384303" />
        <NodeLayout
          Size="255.2,41.6"
          Id="Package\Portal_TakeOverFrom"
          TopLeft="213.833325054911,6978.43333384303" />
        <NodeLayout
          Size="255.2,41.6"
          Id="Package\PricingGroupsLib"
          TopLeft="213.833325054911,7080.03333384303" />
        <NodeLayout
          Size="255.2,41.6"
          Id="Package\PricingPlanRestrictions"
          TopLeft="213.833325054911,7181.63333384303" />
        <NodeLayout
          Size="255.2,41.6"
          Id="Package\PricingScriptRestrictions"
          TopLeft="213.833325054911,7283.23333384303" />
        <NodeLayout
          Size="255.2,41.6"
          Id="Package\PricingUnitOfMeasure"
          TopLeft="213.833325054911,7384.83333384303" />
        <NodeLayout
          Size="255.2,41.6"
          Id="Package\ProfitSharingAllocationType"
          TopLeft="213.833325054911,7486.43333384303" />
        <NodeLayout
          Size="255.2,41.6"
          Id="Package\ProfitSharingClasses"
          TopLeft="213.833325054911,7588.03333384303" />
        <NodeLayout
          Size="255.2,41.6"
          Id="Package\PurposeOfLoan_Lib"
          TopLeft="213.833325054911,7689.63333384303" />
        <NodeLayout
          Size="255.2,41.6"
          Id="Package\Questionnaire_Group"
          TopLeft="213.833325054911,7791.23333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\ReasonForDistribution_Lib"
          TopLeft="213.833325054911,7892.83333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\RecordKeeper_Type"
          TopLeft="213.833325054911,7994.43333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\RefinanceFee_Lib"
          TopLeft="213.833325054911,8096.03333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\Refund_Type_Lib"
          TopLeft="213.833325054911,8197.63333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\ServiceSchedule_Lib"
          TopLeft="213.833325054911,8299.23333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\ServiceUM_Type"
          TopLeft="213.833325054911,8400.83333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\SourceHierarchy_Lib"
          TopLeft="213.833325054911,8502.43333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\SourcesAvailable_Lib"
          TopLeft="213.833325054911,8604.03333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\TaskList_Categories"
          TopLeft="213.833325054911,8705.63333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\TaxIDToUse_Lib"
          TopLeft="213.833325054911,8807.23333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\TemplateDoc"
          TopLeft="213.833325054911,8908.83333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\TemplateEmail"
          TopLeft="213.833325054911,9010.43333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\TermsOfTermination_Lib"
          TopLeft="213.833325054911,9112.03333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\Testing_Status_Type"
          TopLeft="213.833325054911,9213.63333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\VestingAcceleration_Lib"
          TopLeft="213.833325054911,9315.23333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\VestingExclusions_Lib"
          TopLeft="213.833325054911,9416.83333384303" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\VestingSource_Lib"
          TopLeft="213.833325054911,9518.43333384304" />
        <NodeLayout
          Size="201.6,41.6"
          Id="Package\WhoPaysFee_Lib"
          TopLeft="213.833325054911,9620.03333384304" />
        <NodeLayout
          Size="271.2,41.6"
          Id="Package\WhoRemitsWithholding_Lib"
          TopLeft="213.833325054911,9721.63333384304" />
        <NodeLayout
          Size="183.2,41.6"
          Id="Package\YearEndNoteCategory"
          TopLeft="213.833325054911,9823.23333384304" />
        <NodeLayout
          Size="219.2,41.6"
          Id="Package\YearsRequirement_Lib"
          TopLeft="213.833325054911,9924.83333384304" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>